import{_ as o,c as u,b as s,a as c,e as a,d as e,w as l,r as i,o as r}from"./app-2O6audqE.js";const d={},k={href:"https://lwn.net/Articles/531114/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://man7.org/linux/man-pages/man7/user_namespaces.7.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://man7.org/linux/man-pages/man7/pid_namespaces.7.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://man7.org/linux/man-pages/man7/network_namespaces.7.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://man7.org/linux/man-pages/man2/clone.2.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://man7.org/linux/man-pages/man2/unshare.2.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://man7.org/linux/man-pages/man2/setns.2.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://man7.org/linux/man-pages/man1/nsenter.1.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://medium.com/@saschagrunert/demystifying-containers-101-a-deep-dive-into-container-technology-for-beginners-d7b60d8511c1",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.ianlewis.org/en/container-runtimes-part-1-introduction-container-r",target:"_blank",rel:"noopener noreferrer"},x={href:"https://rootlesscontaine.rs/",target:"_blank",rel:"noopener noreferrer"};function N(q,n){const t=i("RouteLink"),p=i("ExternalLinkIcon");return r(),u("div",null,[n[26]||(n[26]=s("h1",{id:"namespace-隔离实现",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#namespace-隔离实现"},[s("span",null,"Namespace 隔离实现")])],-1)),s("blockquote",null,[s("p",null,[n[2]||(n[2]=s("strong",null,"系列导航：",-1)),n[3]||(n[3]=a()),e(t,{to:"/blogs/cloud-base/runc-deep-dive/"},{default:l(()=>n[0]||(n[0]=[a("runc 容器运行时深度解析系列")])),_:1,__:[0]}),n[4]||(n[4]=a(" → 第三篇：Namespace 隔离实现")),n[5]||(n[5]=s("br",null,null,-1)),n[6]||(n[6]=s("strong",null,"上一篇：",-1)),n[7]||(n[7]=a()),e(t,{to:"/blogs/cloud-base/runc-deep-dive/02-%E5%AE%B9%E5%99%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%AE%A1%E7%90%86.html"},{default:l(()=>n[1]||(n[1]=[a("容器生命周期管理")])),_:1,__:[1]}),n[8]||(n[8]=s("br",null,null,-1)),n[9]||(n[9]=s("strong",null,"最后更新：",-1)),n[10]||(n[10]=a(" 2024"))])]),n[27]||(n[27]=c(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>本文深入分析 runc 如何实现 Linux Namespace 隔离机制，这是容器技术的核心基础之一。通过 Namespace，容器可以拥有独立的进程空间、网络栈、文件系统视图等，实现与宿主机和其他容器的有效隔离。</p><h2 id="🎯-学习目标" tabindex="-1"><a class="header-anchor" href="#🎯-学习目标"><span>🎯 学习目标</span></a></h2><p>完成本模块后，你将能够：</p><ul><li>深入理解 Linux Namespace 的 8 种类型和作用机制</li><li>掌握 runc 中三阶段进程创建模型的设计原理</li><li>理解 nsenter 的 C 代码实现和系统调用封装</li><li>掌握 namespace 创建、加入和管理的完整流程</li><li>具备调试和定制 namespace 隔离功能的能力</li></ul><h2 id="_1-linux-namespace-基础概念" tabindex="-1"><a class="header-anchor" href="#_1-linux-namespace-基础概念"><span>1. Linux Namespace 基础概念</span></a></h2><h3 id="_1-1-什么是-namespace" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是-namespace"><span>1.1 什么是 Namespace？</span></a></h3><p><strong>Namespace</strong> 是 Linux 内核提供的一种资源隔离机制，它可以让不同的进程组看到不同的系统视图，实现进程级别的虚拟化。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">┌─────────────────────────────────────────────────┐</span>
<span class="line">│                物理机器                         │</span>
<span class="line">├─────────────────┬───────────────────────────────┤</span>
<span class="line">│   容器 A        │        容器 B                 │</span>
<span class="line">│                 │                               │</span>
<span class="line">│ PID: 1,2,3      │     PID: 1,2,3               │</span>
<span class="line">│ NET: eth0       │     NET: eth0                │</span>
<span class="line">│ MNT: /app       │     MNT: /data               │</span>
<span class="line">│ UTS: web-01     │     UTS: db-01               │</span>
<span class="line">└─────────────────┴───────────────────────────────┘</span>
<span class="line">       ▲                        ▲</span>
<span class="line">       │        共享内核         │</span>
<span class="line">   namespace A             namespace B</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>核心特性</strong>：</p><ul><li>🔒 <strong>隔离性</strong>: 每个 namespace 内的进程只能看到自己的资源</li><li>🧬 <strong>继承性</strong>: 子进程继承父进程的 namespace</li><li>🔄 <strong>可加入</strong>: 进程可以加入已存在的 namespace</li><li>🏗️ <strong>可嵌套</strong>: 某些 namespace 支持嵌套结构</li></ul><h3 id="_1-2-八种-namespace-类型详解" tabindex="-1"><a class="header-anchor" href="#_1-2-八种-namespace-类型详解"><span>1.2 八种 Namespace 类型详解</span></a></h3><h4 id="a-pid-namespace-进程id隔离" tabindex="-1"><a class="header-anchor" href="#a-pid-namespace-进程id隔离"><span>A. PID Namespace (进程ID隔离)</span></a></h4><p><strong>作用</strong>: 隔离进程 ID 空间，每个 PID namespace 都有自己的 PID 1 (init进程)</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/configs/namespaces_linux.go:15</span></span>
<span class="line"><span class="token keyword">const</span> NEWPID NamespaceType <span class="token operator">=</span> <span class="token string">&quot;NEWPID&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>关键特性</strong>：</p><ul><li>容器内的 PID 1 进程负责回收僵尸进程</li><li>内外 PID 映射：容器内 PID 1 对应宿主机上某个 PID</li><li>嵌套支持：可以创建多层 PID namespace</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">宿主机视图:        容器内视图:</span>
<span class="line">PID 1: systemd    PID 1: /bin/bash  ← 容器的 init 进程</span>
<span class="line">PID 1234: runc    PID 2: /app       ← 应用进程</span>
<span class="line">PID 1235: bash    (不可见其他进程)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="b-network-namespace-网络隔离" tabindex="-1"><a class="header-anchor" href="#b-network-namespace-网络隔离"><span>B. Network Namespace (网络隔离)</span></a></h4><p><strong>作用</strong>: 隔离网络设备、IP地址、端口、路由表等网络资源</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> NEWNET NamespaceType <span class="token operator">=</span> <span class="token string">&quot;NEWNET&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>隔离资源</strong>：</p><ul><li>网络接口(eth0, lo等)</li><li>IP地址和路由表</li><li>iptables规则</li><li>网络端口范围</li><li>/proc/net 目录内容</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">┌─────────────────┐    ┌─────────────────┐</span>
<span class="line">│   宿主机网络     │    │   容器网络       │</span>
<span class="line">│                 │    │                 │</span>
<span class="line">│ eth0: 10.0.0.1  │    │ eth0: 172.17.0.2│</span>
<span class="line">│ lo: 127.0.0.1   │    │ lo: 127.0.0.1   │</span>
<span class="line">│ 路由表: 默认     │    │ 路由表: 隔离     │</span>
<span class="line">└─────────────────┘    └─────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="c-mount-namespace-文件系统隔离" tabindex="-1"><a class="header-anchor" href="#c-mount-namespace-文件系统隔离"><span>C. Mount Namespace (文件系统隔离)</span></a></h4><p><strong>作用</strong>: 隔离文件系统挂载点，每个 mount namespace 有独立的挂载点列表</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> NEWNS NamespaceType <span class="token operator">=</span> <span class="token string">&quot;NEWNS&quot;</span>  <span class="token comment">// 历史原因，NS是最早的namespace</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>隔离内容</strong>：</p><ul><li>挂载点列表(/proc/mounts)</li><li>根文件系统(/)</li><li>挂载传播属性(private, shared, slave等)</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">宿主机挂载:              容器内挂载:</span>
<span class="line">/dev/sda1 -&gt; /          /dev/sda2 -&gt; /</span>
<span class="line">/dev/sda2 -&gt; /home      tmpfs -&gt; /tmp</span>
<span class="line">tmpfs -&gt; /tmp           /dev/sda3 -&gt; /data</span>
<span class="line">                        overlay -&gt; /app</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="d-user-namespace-用户权限隔离" tabindex="-1"><a class="header-anchor" href="#d-user-namespace-用户权限隔离"><span>D. User Namespace (用户权限隔离)</span></a></h4><p><strong>作用</strong>: 隔离用户ID和组ID，实现用户权限映射</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> NEWUSER NamespaceType <span class="token operator">=</span> <span class="token string">&quot;NEWUSER&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>核心概念</strong>：</p><ul><li>ID 映射：容器内 UID/GID 映射到宿主机的不同 UID/GID</li><li>权限隔离：容器内的 root 用户不等同于宿主机 root</li><li>无特权容器：普通用户也可以创建容器</li></ul><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// ID映射配置示例</span></span>
<span class="line"><span class="token keyword">type</span> IDMap <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    ContainerID <span class="token builtin">int64</span>  <span class="token comment">// 容器内ID: 0 (root)</span></span>
<span class="line">    HostID      <span class="token builtin">int64</span>  <span class="token comment">// 宿主机ID: 1000 (普通用户)</span></span>
<span class="line">    Size        <span class="token builtin">int64</span>  <span class="token comment">// 映射范围: 65536</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>映射示例</strong>：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">容器内视图:        宿主机视图:</span>
<span class="line">UID 0 (root)   →  UID 1000 (user)</span>
<span class="line">UID 1 (user)   →  UID 1001 </span>
<span class="line">UID 100        →  UID 1100</span>
<span class="line">...            →  ...</span>
<span class="line">UID 65535      →  UID 66535</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="e-ipc-namespace-进程间通信隔离" tabindex="-1"><a class="header-anchor" href="#e-ipc-namespace-进程间通信隔离"><span>E. IPC Namespace (进程间通信隔离)</span></a></h4><p><strong>作用</strong>: 隔离 System V IPC 和 POSIX 消息队列</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> NEWIPC NamespaceType <span class="token operator">=</span> <span class="token string">&quot;NEWIPC&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>隔离资源</strong>：</p><ul><li>System V 消息队列、信号量、共享内存</li><li>POSIX 消息队列</li><li>/proc/sysvipc/ 内容</li></ul><h4 id="f-uts-namespace-主机名隔离" tabindex="-1"><a class="header-anchor" href="#f-uts-namespace-主机名隔离"><span>F. UTS Namespace (主机名隔离)</span></a></h4><p><strong>作用</strong>: 隔离主机名(hostname)和域名(domainname)</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> NEWUTS NamespaceType <span class="token operator">=</span> <span class="token string">&quot;NEWUTS&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>应用场景</strong>：</p><ul><li>容器有独立的主机名</li><li>微服务架构中的服务标识</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 宿主机</span></span>
<span class="line">$ <span class="token function">hostname</span></span>
<span class="line">host-machine</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 容器内</span></span>
<span class="line">$ <span class="token function">hostname</span>  </span>
<span class="line">web-server-01</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="g-cgroup-namespace-控制组隔离" tabindex="-1"><a class="header-anchor" href="#g-cgroup-namespace-控制组隔离"><span>G. Cgroup Namespace (控制组隔离)</span></a></h4><p><strong>作用</strong>: 隔离 cgroups 视图，容器内看不到宿主机的完整 cgroups 树</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> NEWCGROUP NamespaceType <span class="token operator">=</span> <span class="token string">&quot;NEWCGROUP&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>特性</strong>：</p><ul><li>虚拟化 /proc/cgroups 和 /proc/self/cgroup 内容</li><li>隐藏宿主机的 cgroups 层次结构</li></ul><h4 id="h-time-namespace-时间隔离" tabindex="-1"><a class="header-anchor" href="#h-time-namespace-时间隔离"><span>H. Time Namespace (时间隔离)</span></a></h4><p><strong>作用</strong>: 隔离系统时间，容器可以有不同的时间视图</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token keyword">const</span> NEWTIME NamespaceType <span class="token operator">=</span> <span class="token string">&quot;NEWTIME&quot;</span>  <span class="token comment">// Linux 5.6+ 支持</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>应用场景</strong>：</p><ul><li>时间旅行测试</li><li>不同时区的应用</li></ul><h2 id="_2-runc-的-namespace-实现架构" tabindex="-1"><a class="header-anchor" href="#_2-runc-的-namespace-实现架构"><span>2. runc 的 Namespace 实现架构</span></a></h2><h3 id="_2-1-核心数据结构" tabindex="-1"><a class="header-anchor" href="#_2-1-核心数据结构"><span>2.1 核心数据结构</span></a></h3><h4 id="namespace-配置结构" tabindex="-1"><a class="header-anchor" href="#namespace-配置结构"><span>Namespace 配置结构</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/configs/namespaces_linux.go:55</span></span>
<span class="line"><span class="token keyword">type</span> Namespace <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Type NamespaceType <span class="token string">\`json:&quot;type&quot;\`</span>         <span class="token comment">// namespace 类型</span></span>
<span class="line">    Path <span class="token builtin">string</span>        <span class="token string">\`json:&quot;path,omitempty&quot;\`</span> <span class="token comment">// 加入现有 namespace 的路径</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Namespaces <span class="token punctuation">[</span><span class="token punctuation">]</span>Namespace</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查是否包含特定类型的 namespace</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>n Namespaces<span class="token punctuation">)</span> <span class="token function">Contains</span><span class="token punctuation">(</span>t NamespaceType<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ns <span class="token operator">:=</span> <span class="token keyword">range</span> n <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> ns<span class="token punctuation">.</span>Type <span class="token operator">==</span> t <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="系统调用映射" tabindex="-1"><a class="header-anchor" href="#系统调用映射"><span>系统调用映射</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/configs/namespaces_syscall.go:12</span></span>
<span class="line"><span class="token keyword">var</span> namespaceInfo <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span>NamespaceType<span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span></span>
<span class="line">    NEWNET<span class="token punctuation">:</span>    unix<span class="token punctuation">.</span>CLONE_NEWNET<span class="token punctuation">,</span>    <span class="token comment">// 0x40000000</span></span>
<span class="line">    NEWNS<span class="token punctuation">:</span>     unix<span class="token punctuation">.</span>CLONE_NEWNS<span class="token punctuation">,</span>     <span class="token comment">// 0x00020000  </span></span>
<span class="line">    NEWUSER<span class="token punctuation">:</span>   unix<span class="token punctuation">.</span>CLONE_NEWUSER<span class="token punctuation">,</span>   <span class="token comment">// 0x10000000</span></span>
<span class="line">    NEWIPC<span class="token punctuation">:</span>    unix<span class="token punctuation">.</span>CLONE_NEWIPC<span class="token punctuation">,</span>    <span class="token comment">// 0x08000000</span></span>
<span class="line">    NEWUTS<span class="token punctuation">:</span>    unix<span class="token punctuation">.</span>CLONE_NEWUTS<span class="token punctuation">,</span>    <span class="token comment">// 0x04000000</span></span>
<span class="line">    NEWPID<span class="token punctuation">:</span>    unix<span class="token punctuation">.</span>CLONE_NEWPID<span class="token punctuation">,</span>    <span class="token comment">// 0x20000000</span></span>
<span class="line">    NEWCGROUP<span class="token punctuation">:</span> unix<span class="token punctuation">.</span>CLONE_NEWCGROUP<span class="token punctuation">,</span> <span class="token comment">// 0x02000000</span></span>
<span class="line">    NEWTIME<span class="token punctuation">:</span>   unix<span class="token punctuation">.</span>CLONE_NEWTIME<span class="token punctuation">,</span>   <span class="token comment">// 0x00000080</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 生成 clone 系统调用标志</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>n Namespaces<span class="token punctuation">)</span> <span class="token function">CloneFlags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">uintptr</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> flag <span class="token builtin">int</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ns <span class="token operator">:=</span> <span class="token keyword">range</span> n <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> ns<span class="token punctuation">.</span>Path <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">continue</span>  <span class="token comment">// 加入现有 namespace，不需要创建新的</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        flag <span class="token operator">|=</span> namespaceInfo<span class="token punctuation">[</span>ns<span class="token punctuation">.</span>Type<span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">uintptr</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-三阶段进程创建模型" tabindex="-1"><a class="header-anchor" href="#_2-2-三阶段进程创建模型"><span>2.2 三阶段进程创建模型</span></a></h3><p>runc 采用独特的三阶段进程创建模型来处理 namespace 的复杂性：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">用户调用: runc create mycontainer</span>
<span class="line">│</span>
<span class="line">▼</span>
<span class="line">┌─────────────────────────────────────────────────┐</span>
<span class="line">│  阶段0: 父进程 (STAGE_PARENT)                   │</span>
<span class="line">│  职责: 用户映射设置、进程协调                    │</span>
<span class="line">│  进程: runc 主进程                              │</span>
<span class="line">└─────────────┬───────────────────────────────────┘</span>
<span class="line">              │ fork() + nsenter</span>
<span class="line">              ▼</span>
<span class="line">┌─────────────────────────────────────────────────┐</span>
<span class="line">│  阶段1: 中间子进程 (STAGE_CHILD)                │</span>
<span class="line">│  职责: 加入/创建 namespace、权限处理             │</span>
<span class="line">│  进程: bootstrap 进程                           │</span>
<span class="line">└─────────────┬───────────────────────────────────┘</span>
<span class="line">              │ fork() </span>
<span class="line">              ▼</span>
<span class="line">┌─────────────────────────────────────────────────┐</span>
<span class="line">│  阶段2: 最终进程 (STAGE_INIT)                   │</span>
<span class="line">│  职责: 容器初始化、执行用户程序                  │</span>
<span class="line">│  进程: 容器的 init 进程                         │</span>
<span class="line">└─────────────────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="为什么需要三阶段" tabindex="-1"><a class="header-anchor" href="#为什么需要三阶段"><span>为什么需要三阶段？</span></a></h4><ol><li><strong>权限处理复杂性</strong>: 用户 namespace 需要先设置映射才能操作其他 namespace</li><li><strong>时序依赖</strong>: 某些 namespace 的创建顺序很重要</li><li><strong>同步需求</strong>: 父进程需要设置子进程的用户映射</li><li><strong>安全考虑</strong>: 最终进程不应该有不必要的权限</li></ol><h3 id="_2-3-nsenter-核心实现" tabindex="-1"><a class="header-anchor" href="#_2-3-nsenter-核心实现"><span>2.3 nsenter 核心实现</span></a></h3><h4 id="c-代码结构" tabindex="-1"><a class="header-anchor" href="#c-代码结构"><span>C 代码结构</span></a></h4><p>runc 使用 C 代码实现底层 namespace 操作，主要文件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">libcontainer/nsenter/</span>
<span class="line">├── nsexec.c          # 主要实现文件</span>
<span class="line">├── namespace.h       # 命名空间常量定义  </span>
<span class="line">├── log.c/log.h       # 日志记录</span>
<span class="line">└── nsenter.go        # Go 与 C 的接口</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="主入口函数" tabindex="-1"><a class="header-anchor" href="#主入口函数"><span>主入口函数</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:638</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">nsexec</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> pipenum<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">nlconfig_t</span> config <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 1. 解析配置和同步管道</span></span>
<span class="line">    pipenum <span class="token operator">=</span> <span class="token function">initpipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>pipenum <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 从管道读取配置信息</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">nlconfig_parse</span><span class="token punctuation">(</span>pipenum<span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to parse netlink config&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 3. 根据阶段执行不同逻辑</span></span>
<span class="line">    <span class="token keyword">switch</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>stage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> STAGE_PARENT<span class="token operator">:</span>  </span>
<span class="line">        <span class="token function">parent_stage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> STAGE_CHILD<span class="token operator">:</span>   </span>
<span class="line">        <span class="token function">child_stage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">case</span> STAGE_INIT<span class="token operator">:</span>    </span>
<span class="line">        <span class="token function">init_stage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置结构体" tabindex="-1"><a class="header-anchor" href="#配置结构体"><span>配置结构体</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:89</span></span>
<span class="line"><span class="token keyword">struct</span> <span class="token class-name">nlconfig_t</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>data<span class="token punctuation">;</span>                    <span class="token comment">// 序列化数据</span></span>
<span class="line">    <span class="token keyword">int</span> stage<span class="token punctuation">;</span>                     <span class="token comment">// 当前阶段</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// namespace 相关</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>namespaces<span class="token punctuation">;</span>              <span class="token comment">// 要加入的 namespace 路径</span></span>
<span class="line">    <span class="token class-name">size_t</span> namespaces_len<span class="token punctuation">;</span>         <span class="token comment">// 长度</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// clone 标志</span></span>
<span class="line">    <span class="token class-name">uint32_t</span> cloneflags<span class="token punctuation">;</span>           <span class="token comment">// clone() 系统调用标志</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 用户映射</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>uidmap<span class="token punctuation">,</span> <span class="token operator">*</span>gidmap<span class="token punctuation">;</span>         <span class="token comment">// ID 映射数据</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>uidmappath<span class="token punctuation">,</span> <span class="token operator">*</span>gidmappath<span class="token punctuation">;</span> <span class="token comment">// 映射文件路径</span></span>
<span class="line">    <span class="token keyword">int</span> uidmap_len<span class="token punctuation">,</span> gidmap_len<span class="token punctuation">;</span>    <span class="token comment">// 映射数据长度</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 其他配置</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>oom_score_adj<span class="token punctuation">;</span>           <span class="token comment">// OOM 分数调整</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>rootfs<span class="token punctuation">;</span>                  <span class="token comment">// 根文件系统路径</span></span>
<span class="line">    bool is_rootless_euid<span class="token punctuation">;</span>         <span class="token comment">// 是否为 rootless 模式</span></span>
<span class="line">    bool is_setgroup<span class="token punctuation">;</span>              <span class="token comment">// 是否可以调用 setgroups</span></span>
<span class="line">    bool no_new_keyring<span class="token punctuation">;</span>           <span class="token comment">// 是否禁用新 keyring</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 时间 namespace 偏移</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>time_offsets<span class="token punctuation">;</span>            <span class="token comment">// 时间偏移配置</span></span>
<span class="line">    <span class="token keyword">int</span> time_offsets_len<span class="token punctuation">;</span>          <span class="token comment">// 偏移配置长度</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-namespace-创建流程详解" tabindex="-1"><a class="header-anchor" href="#_3-namespace-创建流程详解"><span>3. Namespace 创建流程详解</span></a></h2><h3 id="_3-1-阶段0-父进程-stage-parent" tabindex="-1"><a class="header-anchor" href="#_3-1-阶段0-父进程-stage-parent"><span>3.1 阶段0: 父进程 (STAGE_PARENT)</span></a></h3><p><strong>主要职责</strong>: 设置用户映射，协调子进程</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:900</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">parent_stage</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">nlconfig_t</span> <span class="token operator">*</span>config<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">pid_t</span> stage1_pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> stage2_pid <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 1. 等待第一阶段进程就绪</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sync_wait_for_child</span><span class="token punctuation">(</span>syncpipe<span class="token punctuation">,</span> SYNC_RECVPID_PLS<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to sync with child&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">    <span class="token comment">// 接收子进程 PID</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>syncpipe<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stage1_pid<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stage1_pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stage1_pid<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to read child pid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 设置用户 ID 映射</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>uidmappath<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">update_uidmap</span><span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>uidmappath<span class="token punctuation">,</span> stage1_pid<span class="token punctuation">,</span> </span>
<span class="line">                     config<span class="token operator">-&gt;</span>uidmap<span class="token punctuation">,</span> config<span class="token operator">-&gt;</span>uidmap_len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>gidmappath<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">update_gidmap</span><span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>gidmappath<span class="token punctuation">,</span> stage1_pid<span class="token punctuation">,</span> </span>
<span class="line">                     config<span class="token operator">-&gt;</span>gidmap<span class="token punctuation">,</span> config<span class="token operator">-&gt;</span>gidmap_len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 3. 设置时间偏移 (TIME namespace)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>time_offsets<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">update_time_offsets</span><span class="token punctuation">(</span>stage1_pid<span class="token punctuation">,</span> config<span class="token operator">-&gt;</span>time_offsets<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 4. 通知子进程继续</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sync_wake_child</span><span class="token punctuation">(</span>syncpipe<span class="token punctuation">,</span> SYNC_USERMAP_ACK<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to sync with child&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="用户映射设置" tabindex="-1"><a class="header-anchor" href="#用户映射设置"><span>用户映射设置</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:393  </span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">update_uidmap</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>map<span class="token punctuation">,</span> <span class="token class-name">size_t</span> map_len<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 首先尝试直接写入 /proc/pid/uid_map</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write_file</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> map_len<span class="token punctuation">,</span> <span class="token string">&quot;/proc/%d/uid_map&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果权限不足，尝试使用 newuidmap 工具</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">!=</span> EPERM<span class="token punctuation">)</span> </span>
<span class="line">            <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to update /proc/%d/uid_map&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">        <span class="token comment">// 使用外部工具进行映射</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">try_mapping_tool</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> pid<span class="token punctuation">,</span> map<span class="token punctuation">,</span> map_len<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to use newuid map on %d&quot;</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-阶段1-中间子进程-stage-child" tabindex="-1"><a class="header-anchor" href="#_3-2-阶段1-中间子进程-stage-child"><span>3.2 阶段1: 中间子进程 (STAGE_CHILD)</span></a></h3><p><strong>主要职责</strong>: 加入现有 namespace，创建新 namespace</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:1063</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">child_stage</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">nlconfig_t</span> <span class="token operator">*</span>config<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 发送 PID 给父进程</span></span>
<span class="line">    <span class="token class-name">pid_t</span> stage1_pid <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>syncpipe<span class="token punctuation">,</span> <span class="token operator">&amp;</span>stage1_pid<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stage1_pid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>stage1_pid<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to write pid to parent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">    <span class="token comment">// 2. 等待父进程设置用户映射</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sync_wait_for_child</span><span class="token punctuation">(</span>syncpipe<span class="token punctuation">,</span> SYNC_USERMAP_ACK<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to wait for parent to map user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 3. 加入现有的 namespace (如果指定了路径)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>namespaces<span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">join_namespaces</span><span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>namespaces<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 4. 创建用户 namespace (如果需要)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>cloneflags <span class="token operator">&amp;</span> CLONE_NEWUSER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unshare</span><span class="token punctuation">(</span>CLONE_NEWUSER<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to unshare user namespace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 5. 创建其他 namespace</span></span>
<span class="line">    <span class="token function">try_unshare</span><span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>cloneflags <span class="token operator">&amp;</span> <span class="token operator">~</span>CLONE_NEWUSER<span class="token punctuation">,</span> <span class="token string">&quot;remaining namespaces&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 6. Fork 出最终的 init 进程</span></span>
<span class="line">    stage2_pid <span class="token operator">=</span> <span class="token function">clone_parent</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>config<span class="token punctuation">,</span> STAGE_INIT<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>stage2_pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;unable to fork stage-2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">    <span class="token comment">// 7. 等待 init 进程完成初始化</span></span>
<span class="line">    <span class="token function">wait_for_stage2_child</span><span class="token punctuation">(</span>stage2_pid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="namespace-加入机制" tabindex="-1"><a class="header-anchor" href="#namespace-加入机制"><span>Namespace 加入机制</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:533</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">join_namespaces</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>nsspec<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">namespace_t</span> <span class="token operator">*</span>ns_list<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">size_t</span> ns_len<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 1. 解析 namespace 规格字符串</span></span>
<span class="line">    <span class="token comment">// 格式: &quot;net:/proc/1234/ns/net,pid:/proc/1234/ns/pid&quot;</span></span>
<span class="line">    to_join <span class="token operator">=</span> <span class="token function">__open_namespaces</span><span class="token punctuation">(</span>nsspec<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ns_list<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ns_len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 分三个步骤加入，处理权限依赖</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 步骤1: 加入非用户命名空间</span></span>
<span class="line">    joined <span class="token operator">|=</span> <span class="token function">__join_namespaces</span><span class="token punctuation">(</span>to_join <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>joined <span class="token operator">|</span> CLONE_NEWUSER<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">                                ns_list<span class="token punctuation">,</span> ns_len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 步骤2: 加入用户命名空间</span></span>
<span class="line">    joined <span class="token operator">|=</span> <span class="token function">__join_namespaces</span><span class="token punctuation">(</span>CLONE_NEWUSER<span class="token punctuation">,</span> ns_list<span class="token punctuation">,</span> ns_len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 步骤3: 加入剩余的命名空间  </span></span>
<span class="line">    joined <span class="token operator">|=</span> <span class="token function">__join_namespaces</span><span class="token punctuation">(</span>to_join <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span>joined <span class="token operator">|</span> CLONE_NEWUSER<span class="token punctuation">)</span><span class="token punctuation">,</span> </span>
<span class="line">                                ns_list<span class="token punctuation">,</span> ns_len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token function">free_namespaces</span><span class="token punctuation">(</span>ns_list<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="加入单个-namespace" tabindex="-1"><a class="header-anchor" href="#加入单个-namespace"><span>加入单个 Namespace</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:458</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token class-name">nsset_t</span> <span class="token function">__join_namespaces</span><span class="token punctuation">(</span><span class="token class-name">nsset_t</span> allow<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">namespace_t</span> <span class="token operator">*</span>ns_list<span class="token punctuation">,</span> <span class="token class-name">size_t</span> ns_len<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">nsset_t</span> joined <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">size_t</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ns_len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">namespace_t</span> <span class="token operator">*</span>ns <span class="token operator">=</span> <span class="token operator">&amp;</span>ns_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> nstype <span class="token operator">=</span> <span class="token function">nstype</span><span class="token punctuation">(</span>ns<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>nstype <span class="token operator">&amp;</span> allow<span class="token punctuation">)</span><span class="token punctuation">)</span> </span>
<span class="line">            <span class="token keyword">continue</span><span class="token punctuation">;</span></span>
<span class="line">            </span>
<span class="line">        <span class="token comment">// 使用 setns() 系统调用加入 namespace</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setns</span><span class="token punctuation">(</span>ns<span class="token operator">-&gt;</span>fd<span class="token punctuation">,</span> nstype<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EPERM<span class="token punctuation">)</span> </span>
<span class="line">                <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 跳过权限错误</span></span>
<span class="line">            <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to setns into %s namespace&quot;</span><span class="token punctuation">,</span> ns<span class="token operator">-&gt;</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        joined <span class="token operator">|=</span> nstype<span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 用户命名空间特殊处理</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>nstype <span class="token operator">==</span> CLONE_NEWUSER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setresuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to become root in user namespace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setresgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  </span>
<span class="line">                <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to become root in user namespace&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> joined<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3-阶段2-最终-init-进程-stage-init" tabindex="-1"><a class="header-anchor" href="#_3-3-阶段2-最终-init-进程-stage-init"><span>3.3 阶段2: 最终 init 进程 (STAGE_INIT)</span></a></h3><p><strong>主要职责</strong>: 进程属性设置，返回 Go 运行时</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:1184</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">init_stage</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">nlconfig_t</span> <span class="token operator">*</span>config<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 创建新的进程会话</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;setsid failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 设置用户和组 ID (如果不在用户命名空间中)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>cloneflags <span class="token operator">&amp;</span> CLONE_NEWUSER<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setresuid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to setresuid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">setresgid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to setresgid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 3. 设置 OOM 分数调整</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>oom_score_adj <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>oom_score_adj<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">write_file</span><span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>oom_score_adj<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>oom_score_adj<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                  <span class="token string">&quot;/proc/self/oom_score_adj&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 4. 清理不需要的文件描述符</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>syncpipe <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">close</span><span class="token punctuation">(</span>syncpipe<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        syncpipe <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 5. 设置进程为不可转储 (安全措施)  </span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token operator">-&gt;</span>namespaces<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">prctl</span><span class="token punctuation">(</span>PR_SET_DUMPABLE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">bail</span><span class="token punctuation">(</span><span class="token string">&quot;failed to set process as non-dumpable&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 6. 返回到 Go 运行时继续初始化</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 控制权返回 Go</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-go-运行时集成" tabindex="-1"><a class="header-anchor" href="#_4-go-运行时集成"><span>4. Go 运行时集成</span></a></h2><h3 id="_4-1-标准初始化流程" tabindex="-1"><a class="header-anchor" href="#_4-1-标准初始化流程"><span>4.1 标准初始化流程</span></a></h3><p>当 C 代码完成 namespace 设置后，控制权返回到 Go 运行时：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/standard_init_linux.go:52</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>l <span class="token operator">*</span>linuxStandardInit<span class="token punctuation">)</span> <span class="token function">Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. Keyring 设置</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>NoNewKeyring <span class="token punctuation">{</span></span>
<span class="line">        ringname<span class="token punctuation">,</span> keepperms<span class="token punctuation">,</span> newperms <span class="token operator">:=</span> l<span class="token punctuation">.</span><span class="token function">getSessionRingParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token comment">// 加入会话 keyring，设置 SELinux 标签</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> keys<span class="token punctuation">.</span><span class="token function">JoinSessionKeyring</span><span class="token punctuation">(</span>ringname<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 网络配置 (NEWNET namespace)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">setupNetwork</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">setupRoute</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 3. 根文件系统准备 (NEWNS namespace)  </span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">prepareRootfs</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>pipe<span class="token punctuation">,</span> l<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 4. 挂载命名空间处理</span></span>
<span class="line">    <span class="token keyword">if</span> l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Namespaces<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>configs<span class="token punctuation">.</span>NEWNS<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">finalizeRootfs</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 5. UTS namespace - 设置主机名</span></span>
<span class="line">    <span class="token keyword">if</span> hostname <span class="token operator">:=</span> l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Hostname<span class="token punctuation">;</span> hostname <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Sethostname</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 6. 最终命名空间配置</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">finalizeNamespace</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 7. 执行用户程序</span></span>
<span class="line">    name<span class="token punctuation">,</span> err <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">LookPath</span><span class="token punctuation">(</span>l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> system<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Args<span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">Environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-网络配置示例" tabindex="-1"><a class="header-anchor" href="#_4-2-网络配置示例"><span>4.2 网络配置示例</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/standard_init_linux.go:96</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">setupNetwork</span><span class="token punctuation">(</span>config <span class="token operator">*</span>initConfig<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> config <span class="token operator">:=</span> <span class="token keyword">range</span> config<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Networks <span class="token punctuation">{</span></span>
<span class="line">        strategy<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getStrategy</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>Type<span class="token punctuation">)</span>  </span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> strategy<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span>Network<span class="token punctuation">)</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span>Pid<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-3-主机名设置示例" tabindex="-1"><a class="header-anchor" href="#_4-3-主机名设置示例"><span>4.3 主机名设置示例</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// UTS namespace 中的主机名设置</span></span>
<span class="line"><span class="token keyword">if</span> hostname <span class="token operator">:=</span> l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Hostname<span class="token punctuation">;</span> hostname <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Sethostname</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>hostname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to set hostname %q: %w&quot;</span><span class="token punctuation">,</span> hostname<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 域名设置</span></span>
<span class="line"><span class="token keyword">if</span> domainname <span class="token operator">:=</span> l<span class="token punctuation">.</span>config<span class="token punctuation">.</span>Config<span class="token punctuation">.</span>Domainname<span class="token punctuation">;</span> domainname <span class="token operator">!=</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Setdomainname</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>domainname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;failed to set domainname %q: %w&quot;</span><span class="token punctuation">,</span> domainname<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-namespace-创建顺序和依赖关系" tabindex="-1"><a class="header-anchor" href="#_5-namespace-创建顺序和依赖关系"><span>5. Namespace 创建顺序和依赖关系</span></a></h2><h3 id="_5-1-创建顺序原则" tabindex="-1"><a class="header-anchor" href="#_5-1-创建顺序原则"><span>5.1 创建顺序原则</span></a></h3><p>runc 严格按照以下顺序处理 namespace：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/configs/namespaces_linux.go:123</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NamespaceTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>NamespaceType <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>NamespaceType<span class="token punctuation">{</span></span>
<span class="line">        NEWUSER<span class="token punctuation">,</span>   <span class="token comment">// 1. 用户命名空间 - 必须最先</span></span>
<span class="line">        NEWIPC<span class="token punctuation">,</span>    <span class="token comment">// 2. IPC 命名空间</span></span>
<span class="line">        NEWUTS<span class="token punctuation">,</span>    <span class="token comment">// 3. UTS 命名空间  </span></span>
<span class="line">        NEWNET<span class="token punctuation">,</span>    <span class="token comment">// 4. 网络命名空间</span></span>
<span class="line">        NEWPID<span class="token punctuation">,</span>    <span class="token comment">// 5. PID 命名空间</span></span>
<span class="line">        NEWNS<span class="token punctuation">,</span>     <span class="token comment">// 6. 挂载命名空间</span></span>
<span class="line">        NEWCGROUP<span class="token punctuation">,</span> <span class="token comment">// 7. Cgroup 命名空间</span></span>
<span class="line">        NEWTIME<span class="token punctuation">,</span>   <span class="token comment">// 8. 时间命名空间</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-依赖关系详解" tabindex="-1"><a class="header-anchor" href="#_5-2-依赖关系详解"><span>5.2 依赖关系详解</span></a></h3><h4 id="用户命名空间的特殊地位" tabindex="-1"><a class="header-anchor" href="#用户命名空间的特殊地位"><span>用户命名空间的特殊地位</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">NEWUSER (用户命名空间)</span>
<span class="line">    │</span>
<span class="line">    │ 必须首先创建，因为：</span>
<span class="line">    │ 1. 影响其他 namespace 的权限检查</span>
<span class="line">    │ 2. 创建后才能进行 ID 映射</span>
<span class="line">    │ 3. 其他 namespace 的创建可能需要相应权限</span>
<span class="line">    │</span>
<span class="line">    ├── NEWIPC (需要 IPC 权限)</span>
<span class="line">    ├── NEWUTS (需要 SYS_ADMIN 权限)</span>
<span class="line">    ├── NEWNET (需要 NET_ADMIN 权限)  </span>
<span class="line">    ├── NEWPID (需要 SYS_ADMIN 权限)</span>
<span class="line">    ├── NEWNS  (需要 SYS_ADMIN 权限)</span>
<span class="line">    └── NEWCGROUP (需要 SYS_ADMIN 权限)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="权限检查逻辑" tabindex="-1"><a class="header-anchor" href="#权限检查逻辑"><span>权限检查逻辑</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 检查创建 namespace 所需的权限</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">checkNamespacePermissions</span><span class="token punctuation">(</span>ns NamespaceType<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">switch</span> ns <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> NEWUSER<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment">// 用户命名空间不需要特殊权限</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token keyword">case</span> NEWNET<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment">// 需要 CAP_NET_ADMIN 或在用户命名空间中</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">checkCapability</span><span class="token punctuation">(</span>unix<span class="token punctuation">.</span>CAP_NET_ADMIN<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">case</span> NEWNS<span class="token punctuation">,</span> NEWUTS<span class="token punctuation">,</span> NEWPID<span class="token punctuation">,</span> NEWIPC<span class="token punctuation">,</span> NEWCGROUP<span class="token punctuation">:</span></span>
<span class="line">        <span class="token comment">// 需要 CAP_SYS_ADMIN 或在用户命名空间中</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token function">checkCapability</span><span class="token punctuation">(</span>unix<span class="token punctuation">.</span>CAP_SYS_ADMIN<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-同步机制详解" tabindex="-1"><a class="header-anchor" href="#_5-3-同步机制详解"><span>5.3 同步机制详解</span></a></h3><h4 id="同步消息类型" tabindex="-1"><a class="header-anchor" href="#同步消息类型"><span>同步消息类型</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// libcontainer/nsenter/nsexec.c:60</span></span>
<span class="line"><span class="token keyword">enum</span> <span class="token class-name">sync_t</span> <span class="token punctuation">{</span></span>
<span class="line">    SYNC_USERMAP_PLS <span class="token operator">=</span> <span class="token number">0x40</span><span class="token punctuation">,</span>      <span class="token comment">// 请求父进程进行用户映射</span></span>
<span class="line">    SYNC_USERMAP_ACK <span class="token operator">=</span> <span class="token number">0x41</span><span class="token punctuation">,</span>      <span class="token comment">// 用户映射完成确认</span></span>
<span class="line">    SYNC_RECVPID_PLS <span class="token operator">=</span> <span class="token number">0x42</span><span class="token punctuation">,</span>      <span class="token comment">// 发送 PID 请求</span></span>
<span class="line">    SYNC_RECVPID_ACK <span class="token operator">=</span> <span class="token number">0x43</span><span class="token punctuation">,</span>      <span class="token comment">// PID 接收确认  </span></span>
<span class="line">    SYNC_GRANDCHILD <span class="token operator">=</span> <span class="token number">0x44</span><span class="token punctuation">,</span>       <span class="token comment">// 孙进程就绪信号</span></span>
<span class="line">    SYNC_CHILD_FINISH <span class="token operator">=</span> <span class="token number">0x45</span><span class="token punctuation">,</span>     <span class="token comment">// 子进程完成信号</span></span>
<span class="line">    SYNC_TIMEOFFSETS_PLS <span class="token operator">=</span> <span class="token number">0x46</span><span class="token punctuation">,</span>  <span class="token comment">// 请求设置时间偏移</span></span>
<span class="line">    SYNC_TIMEOFFSETS_ACK <span class="token operator">=</span> <span class="token number">0x47</span><span class="token punctuation">,</span>  <span class="token comment">// 时间偏移设置完成</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="同步流程图" tabindex="-1"><a class="header-anchor" href="#同步流程图"><span>同步流程图</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">父进程 (STAGE_PARENT)          中间进程 (STAGE_CHILD)           最终进程 (STAGE_INIT)</span>
<span class="line">      │                              │                               │</span>
<span class="line">      │◄────── SYNC_RECVPID_PLS ─────┤                               │</span>
<span class="line">      │                              │                               │</span>
<span class="line">      │─── update_uidmap/gidmap ──── │                               │</span>
<span class="line">      │                              │                               │  </span>
<span class="line">      │────── SYNC_USERMAP_ACK ─────►│                               │</span>
<span class="line">      │                              │                               │</span>
<span class="line">      │                              │─── unshare/join namespaces ──│</span>
<span class="line">      │                              │                               │</span>
<span class="line">      │                              │────────── fork() ───────────►│</span>
<span class="line">      │                              │                               │</span>
<span class="line">      │◄──── SYNC_GRANDCHILD ────────┼───────────────────────────────│</span>
<span class="line">      │                              │                               │</span>
<span class="line">      │────── SYNC_CHILD_FINISH ────►│                               │</span>
<span class="line">      │                              │                               │</span>
<span class="line">      │                              │ exit                          │ init...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-高级特性和优化" tabindex="-1"><a class="header-anchor" href="#_6-高级特性和优化"><span>6. 高级特性和优化</span></a></h2><h3 id="_6-1-时间命名空间处理" tabindex="-1"><a class="header-anchor" href="#_6-1-时间命名空间处理"><span>6.1 时间命名空间处理</span></a></h3><p>时间命名空间是较新的功能 (Linux 5.6+)，允许容器有不同的系统时间：</p><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 设置时间偏移</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">update_time_offsets</span><span class="token punctuation">(</span><span class="token class-name">pid_t</span> pid<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>offsets<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>saveptr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">char</span> <span class="token operator">*</span>offset_str <span class="token operator">=</span> <span class="token function">strtok_r</span><span class="token punctuation">(</span>offsets<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>saveptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>offset_str <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 解析偏移格式: &quot;monotonic 1000000000 0&quot;  </span></span>
<span class="line">        <span class="token keyword">char</span> <span class="token operator">*</span>clock_id <span class="token operator">=</span> <span class="token function">strtok_r</span><span class="token punctuation">(</span>offset_str<span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>saveptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">char</span> <span class="token operator">*</span>sec_str <span class="token operator">=</span> <span class="token function">strtok_r</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>saveptr<span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line">        <span class="token keyword">char</span> <span class="token operator">*</span>nsec_str <span class="token operator">=</span> <span class="token function">strtok_r</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>saveptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 写入 /proc/pid/timens_offsets</span></span>
<span class="line">        <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open_proc_file</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token string">&quot;timens_offsets&quot;</span><span class="token punctuation">,</span> O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">dprintf</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token string">&quot;%s %s %s\\n&quot;</span><span class="token punctuation">,</span> clock_id<span class="token punctuation">,</span> sec_str<span class="token punctuation">,</span> nsec_str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        offset_str <span class="token operator">=</span> <span class="token function">strtok_r</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>saveptr<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-rootless-容器支持" tabindex="-1"><a class="header-anchor" href="#_6-2-rootless-容器支持"><span>6.2 Rootless 容器支持</span></a></h3><p>Rootless 模式允许普通用户创建容器：</p><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 检查是否运行在 rootless 模式</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">isRootless</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> os<span class="token punctuation">.</span><span class="token function">Geteuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// rootless 模式的特殊处理</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">handleRootlessNamespaces</span><span class="token punctuation">(</span>namespaces Namespaces<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token function">isRootless</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// rootless 模式必须包含用户命名空间</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>namespaces<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>NEWUSER<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">&quot;rootless containers require user namespaces&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 某些功能在 rootless 模式下受限</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ns <span class="token operator">:=</span> <span class="token keyword">range</span> namespaces <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span> ns<span class="token punctuation">.</span>Type <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> NEWNET<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// 网络命名空间在 rootless 模式下功能受限</span></span>
<span class="line">            logrus<span class="token punctuation">.</span><span class="token function">Warn</span><span class="token punctuation">(</span><span class="token string">&quot;network namespace has limited functionality in rootless mode&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3-性能优化" tabindex="-1"><a class="header-anchor" href="#_6-3-性能优化"><span>6.3 性能优化</span></a></h3><h4 id="批量-namespace-操作" tabindex="-1"><a class="header-anchor" href="#批量-namespace-操作"><span>批量 Namespace 操作</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 批量创建多个 namespace，减少系统调用次数</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">create_namespaces_batch</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> clone_flags<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 一次 unshare 调用创建多个 namespace</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unshare</span><span class="token punctuation">(</span>clone_flags<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 如果批量创建失败，逐个尝试</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">uint32_t</span> flag <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>clone_flags <span class="token operator">&amp;</span> flag<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">unshare</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> errno <span class="token operator">!=</span> EINVAL<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件描述符缓存" tabindex="-1"><a class="header-anchor" href="#文件描述符缓存"><span>文件描述符缓存</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c" data-title="c"><pre><code><span class="line"><span class="token comment">// 缓存 namespace 文件描述符，避免重复打开</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token keyword">int</span> ns_fd_cache<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">get_namespace_fd</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ns_path<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 检查缓存</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>ns_fd_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">char</span> fd_path<span class="token punctuation">[</span>PATH_MAX<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">snprintf</span><span class="token punctuation">(</span>fd_path<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fd_path<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;/proc/self/fd/%d&quot;</span><span class="token punctuation">,</span> ns_fd_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">readlink</span><span class="token punctuation">(</span>fd_path<span class="token punctuation">)</span><span class="token punctuation">,</span> ns_path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> ns_fd_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 打开并缓存</span></span>
<span class="line">    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>ns_path<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 找空位缓存</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>ns_fd_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                ns_fd_cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> fd<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> fd<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-调试和故障排除" tabindex="-1"><a class="header-anchor" href="#_7-调试和故障排除"><span>7. 调试和故障排除</span></a></h2><h3 id="_7-1-常见问题诊断" tabindex="-1"><a class="header-anchor" href="#_7-1-常见问题诊断"><span>7.1 常见问题诊断</span></a></h3><h4 id="权限问题诊断" tabindex="-1"><a class="header-anchor" href="#权限问题诊断"><span>权限问题诊断</span></a></h4><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 检查用户命名空间支持</span></span>
<span class="line">$ <span class="token function">cat</span> /proc/sys/user/max_user_namespaces</span>
<span class="line"><span class="token number">65536</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 检查当前进程的 namespace</span></span>
<span class="line">$ <span class="token function">ls</span> <span class="token parameter variable">-la</span> /proc/self/ns/</span>
<span class="line">lrwxrwxrwx <span class="token number">1</span> user user <span class="token number">0</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:00 cgroup -<span class="token operator">&gt;</span> <span class="token string">&#39;cgroup:[4026531835]&#39;</span></span>
<span class="line">lrwxrwxrwx <span class="token number">1</span> user user <span class="token number">0</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:00 ipc -<span class="token operator">&gt;</span> <span class="token string">&#39;ipc:[4026531839]&#39;</span></span>
<span class="line">lrwxrwxrwx <span class="token number">1</span> user user <span class="token number">0</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:00 mnt -<span class="token operator">&gt;</span> <span class="token string">&#39;mnt:[4026531840]&#39;</span></span>
<span class="line">lrwxrwxrwx <span class="token number">1</span> user user <span class="token number">0</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:00 net -<span class="token operator">&gt;</span> <span class="token string">&#39;net:[4026531992]&#39;</span></span>
<span class="line">lrwxrwxrwx <span class="token number">1</span> user user <span class="token number">0</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:00 pid -<span class="token operator">&gt;</span> <span class="token string">&#39;pid:[4026531836]&#39;</span></span>
<span class="line">lrwxrwxrwx <span class="token number">1</span> user user <span class="token number">0</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:00 user -<span class="token operator">&gt;</span> <span class="token string">&#39;user:[4026531837]&#39;</span></span>
<span class="line">lrwxrwxrwx <span class="token number">1</span> user user <span class="token number">0</span> Jan  <span class="token number">1</span> <span class="token number">10</span>:00 uts -<span class="token operator">&gt;</span> <span class="token string">&#39;uts:[4026531838]&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 检查用户映射</span></span>
<span class="line">$ <span class="token function">cat</span> /proc/1234/uid_map</span>
<span class="line">         <span class="token number">0</span>       <span class="token number">1000</span>          <span class="token number">1</span></span>
<span class="line">         <span class="token number">1</span>       <span class="token number">1001</span>      <span class="token number">65534</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="调试信息收集" tabindex="-1"><a class="header-anchor" href="#调试信息收集"><span>调试信息收集</span></a></h4><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 添加 namespace 调试信息</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">debugNamespaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    nsTypes <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;cgroup&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ipc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mnt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;net&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pid&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;uts&quot;</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">&quot;Current namespace information:&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> nsType <span class="token operator">:=</span> <span class="token keyword">range</span> nsTypes <span class="token punctuation">{</span></span>
<span class="line">        nsPath <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;/proc/self/ns/%s&quot;</span><span class="token punctuation">,</span> nsType<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> target<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Readlink</span><span class="token punctuation">(</span>nsPath<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;  %s: %s\\n&quot;</span><span class="token punctuation">,</span> nsType<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;  %s: error reading (%v)\\n&quot;</span><span class="token punctuation">,</span> nsType<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 检查用户映射</span></span>
<span class="line">    <span class="token keyword">if</span> data<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">&quot;/proc/self/uid_map&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;UID mapping:\\n%s&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> data<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">&quot;/proc/self/gid_map&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;GID mapping:\\n%s&quot;</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-性能分析" tabindex="-1"><a class="header-anchor" href="#_7-2-性能分析"><span>7.2 性能分析</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 使用 strace 跟踪系统调用</span></span>
<span class="line">$ <span class="token function">strace</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>clone,unshare,setns runc create mycontainer</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 使用 perf 分析性能</span></span>
<span class="line">$ perf record runc run mycontainer</span>
<span class="line">$ perf report</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 检查 namespace 创建时间</span></span>
<span class="line">$ <span class="token function">time</span> runc create mycontainer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-实践练习" tabindex="-1"><a class="header-anchor" href="#_8-实践练习"><span>8. 实践练习</span></a></h2><h3 id="_8-1-手动创建-namespace" tabindex="-1"><a class="header-anchor" href="#_8-1-手动创建-namespace"><span>8.1 手动创建 Namespace</span></a></h3><p>体验不同类型的 namespace 隔离效果：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token comment"># 练习1：创建 PID namespace</span></span>
<span class="line"><span class="token function">sudo</span> unshare <span class="token parameter variable">--pid</span> <span class="token parameter variable">--fork</span> --mount-proc /bin/bash</span>
<span class="line"><span class="token comment"># 在新 shell 中执行:</span></span>
<span class="line"><span class="token function">ps</span> aux  <span class="token comment"># 只能看到当前 namespace 的进程</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 练习2：创建网络 namespace  </span></span>
<span class="line"><span class="token function">sudo</span> unshare <span class="token parameter variable">--net</span> /bin/bash</span>
<span class="line"><span class="token function">ip</span> <span class="token function">link</span> show  <span class="token comment"># 只能看到 loopback 接口</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 练习3：创建挂载 namespace</span></span>
<span class="line"><span class="token function">sudo</span> unshare <span class="token parameter variable">--mount</span> /bin/bash</span>
<span class="line"><span class="token function">mount</span> <span class="token parameter variable">-t</span> tmpfs tmpfs /tmp</span>
<span class="line"><span class="token function">ls</span> /tmp  <span class="token comment"># 只在当前 namespace 中可见</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 练习4：创建 UTS namespace</span></span>
<span class="line"><span class="token function">sudo</span> unshare <span class="token parameter variable">--uts</span> /bin/bash  </span>
<span class="line"><span class="token function">hostname</span> container-test</span>
<span class="line"><span class="token function">hostname</span>  <span class="token comment"># 只在当前 namespace 中生效</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2-自定义-namespace-配置" tabindex="-1"><a class="header-anchor" href="#_8-2-自定义-namespace-配置"><span>8.2 自定义 Namespace 配置</span></a></h3><p>修改容器配置体验不同的 namespace 组合：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;ociVersion&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.0.2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;process&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;args&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;/bin/sh&quot;</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;root&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;path&quot;</span><span class="token operator">:</span> <span class="token string">&quot;rootfs&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;linux&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;namespaces&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;pid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;network&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">      <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;mount&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span><span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;uts&quot;</span><span class="token punctuation">}</span></span>
<span class="line">      <span class="token comment">// 故意省略 user namespace，观察权限变化</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3-namespace-性能测试" tabindex="-1"><a class="header-anchor" href="#_8-3-namespace-性能测试"><span>8.3 Namespace 性能测试</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token shebang important">#!/bin/bash</span></span>
<span class="line"><span class="token comment"># 测试不同 namespace 组合的创建时间</span></span>
<span class="line"></span>
<span class="line"><span class="token function-name function">test_namespace_performance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token builtin class-name">local</span> <span class="token assign-left variable">namespaces</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$1</span>&quot;</span></span>
<span class="line">    <span class="token builtin class-name">local</span> <span class="token assign-left variable">desc</span><span class="token operator">=</span><span class="token string">&quot;<span class="token variable">$2</span>&quot;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token builtin class-name">echo</span> <span class="token string">&quot;Testing <span class="token variable">$desc</span>...&quot;</span></span>
<span class="line">    <span class="token function">time</span> <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span></span>
<span class="line">        <span class="token function">sudo</span> unshare <span class="token variable">$namespaces</span> /bin/true</span>
<span class="line">    <span class="token keyword">done</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 测试各种组合</span></span>
<span class="line">test_namespace_performance <span class="token string">&quot;--pid&quot;</span> <span class="token string">&quot;PID namespace only&quot;</span></span>
<span class="line">test_namespace_performance <span class="token string">&quot;--pid --net&quot;</span> <span class="token string">&quot;PID + Network&quot;</span></span>
<span class="line">test_namespace_performance <span class="token string">&quot;--pid --net --mount --uts --ipc&quot;</span> <span class="token string">&quot;All common namespaces&quot;</span></span>
<span class="line">test_namespace_performance <span class="token string">&quot;--user --pid --net --mount --uts --ipc&quot;</span> <span class="token string">&quot;Including user namespace&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4-调试-runc-namespace-创建" tabindex="-1"><a class="header-anchor" href="#_8-4-调试-runc-namespace-创建"><span>8.4 调试 runc Namespace 创建</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 启用 runc 调试日志</span></span>
<span class="line"><span class="token builtin class-name">export</span> <span class="token assign-left variable">RUNC_DEBUG</span><span class="token operator">=</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 跟踪 namespace 创建过程</span></span>
<span class="line"><span class="token function">strace</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>clone,unshare,setns,openat <span class="token parameter variable">-o</span> /tmp/runc.strace <span class="token punctuation">\\</span></span>
<span class="line">    runc create mycontainer</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 分析结果</span></span>
<span class="line"><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token string">&quot;(clone|unshare|setns)&quot;</span> /tmp/runc.strace <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-思考题" tabindex="-1"><a class="header-anchor" href="#_9-思考题"><span>9. 思考题</span></a></h2><h3 id="_9-1-架构设计思考" tabindex="-1"><a class="header-anchor" href="#_9-1-架构设计思考"><span>9.1 架构设计思考</span></a></h3><ol><li><p><strong>三阶段设计的必要性</strong>：为什么 runc 需要三阶段进程创建？能否简化为两阶段？</p></li><li><p><strong>用户命名空间优先级</strong>：为什么用户命名空间必须最先创建？如果顺序错误会发生什么？</p></li><li><p><strong>同步机制复杂性</strong>：父子进程之间的同步为什么这么复杂？有没有更简单的方案？</p></li></ol><h3 id="_9-2-技术实现思考" tabindex="-1"><a class="header-anchor" href="#_9-2-技术实现思考"><span>9.2 技术实现思考</span></a></h3><ol start="4"><li><p><strong>C/Go 混合编程</strong>：为什么底层 namespace 操作用 C 实现，而不是纯 Go？</p></li><li><p><strong>错误处理策略</strong>：如果某个 namespace 创建失败，runc 如何进行清理？</p></li><li><p><strong>性能优化空间</strong>：当前的实现有哪些性能瓶颈？如何优化？</p></li></ol><h3 id="_9-3-安全性思考" tabindex="-1"><a class="header-anchor" href="#_9-3-安全性思考"><span>9.3 安全性思考</span></a></h3><ol start="7"><li><p><strong>权限逃逸风险</strong>：user namespace 的 ID 映射有什么安全风险？</p></li><li><p><strong>隔离完整性</strong>：如何确保容器无法看到或影响宿主机的其他 namespace？</p></li><li><p><strong>Rootless 安全性</strong>：rootless 容器是否真的更安全？有什么局限性？</p></li></ol><h3 id="_9-4-扩展性思考" tabindex="-1"><a class="header-anchor" href="#_9-4-扩展性思考"><span>9.4 扩展性思考</span></a></h3><ol start="10"><li><strong>新 Namespace 支持</strong>：如果 Linux 内核增加新的 namespace 类型，runc 需要如何修改？</li></ol><h2 id="_10-扩展阅读" tabindex="-1"><a class="header-anchor" href="#_10-扩展阅读"><span>10. 扩展阅读</span></a></h2><h3 id="_10-1-linux-内核文档" tabindex="-1"><a class="header-anchor" href="#_10-1-linux-内核文档"><span>10.1 Linux 内核文档</span></a></h3>`,158)),s("ul",null,[s("li",null,[s("a",k,[n[11]||(n[11]=a("Namespaces in operation")),e(p)])]),s("li",null,[s("a",m,[n[12]||(n[12]=a("User namespaces")),e(p)])]),s("li",null,[s("a",v,[n[13]||(n[13]=a("PID namespaces")),e(p)])]),s("li",null,[s("a",b,[n[14]||(n[14]=a("Network namespaces")),e(p)])])]),n[28]||(n[28]=s("h3",{id:"_10-2-系统调用参考",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_10-2-系统调用参考"},[s("span",null,"10.2 系统调用参考")])],-1)),s("ul",null,[s("li",null,[s("a",g,[n[15]||(n[15]=a("clone(2)")),e(p)])]),s("li",null,[s("a",h,[n[16]||(n[16]=a("unshare(2)")),e(p)])]),s("li",null,[s("a",f,[n[17]||(n[17]=a("setns(2)")),e(p)])]),s("li",null,[s("a",_,[n[18]||(n[18]=a("nsenter(1)")),e(p)])])]),n[29]||(n[29]=s("h3",{id:"_10-3-深入学习资源",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_10-3-深入学习资源"},[s("span",null,"10.3 深入学习资源")])],-1)),s("ul",null,[s("li",null,[s("a",y,[n[19]||(n[19]=a("Linux Container Primitives")),e(p)])]),s("li",null,[s("a",w,[n[20]||(n[20]=a("Container Runtimes")),e(p)])]),s("li",null,[s("a",x,[n[21]||(n[21]=a("Rootless Containers")),e(p)])])]),n[30]||(n[30]=c('<h2 id="🎯-模块总结" tabindex="-1"><a class="header-anchor" href="#🎯-模块总结"><span>🎯 模块总结</span></a></h2><p>通过本模块的学习，你应该已经掌握了：</p><p>✅ <strong>8种 Namespace 类型</strong>：理解每种 namespace 的作用和隔离范围<br> ✅ <strong>三阶段进程模型</strong>：理解复杂的进程创建和同步机制<br> ✅ <strong>底层实现原理</strong>：掌握 C 代码实现和系统调用使用<br> ✅ <strong>权限和依赖关系</strong>：理解 namespace 创建顺序和权限要求<br> ✅ <strong>调试和优化方法</strong>：具备故障排除和性能分析能力</p>',3)),s("p",null,[n[23]||(n[23]=s("strong",null,"下一步",-1)),n[24]||(n[24]=a(": 进入 ")),e(t,{to:"/blogs/cloud-base/runc-deep-dive/04-Cgroups%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86.html"},{default:l(()=>n[22]||(n[22]=[a("模块 4: Cgroups 资源管理")])),_:1,__:[22]}),n[25]||(n[25]=a("，学习容器资源限制和监控机制。"))])])}const I=o(d,[["render",N]]),S=JSON.parse('{"path":"/blogs/cloud-base/runc-deep-dive/03-Namespacegelishixian.html","title":"Namespace 隔离实现","lang":"en-US","frontmatter":{"categories":["cloud-base/runc-deep-dive"]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"🎯 学习目标","slug":"🎯-学习目标","link":"#🎯-学习目标","children":[]},{"level":2,"title":"1. Linux Namespace 基础概念","slug":"_1-linux-namespace-基础概念","link":"#_1-linux-namespace-基础概念","children":[{"level":3,"title":"1.1 什么是 Namespace？","slug":"_1-1-什么是-namespace","link":"#_1-1-什么是-namespace","children":[]},{"level":3,"title":"1.2 八种 Namespace 类型详解","slug":"_1-2-八种-namespace-类型详解","link":"#_1-2-八种-namespace-类型详解","children":[]}]},{"level":2,"title":"2. runc 的 Namespace 实现架构","slug":"_2-runc-的-namespace-实现架构","link":"#_2-runc-的-namespace-实现架构","children":[{"level":3,"title":"2.1 核心数据结构","slug":"_2-1-核心数据结构","link":"#_2-1-核心数据结构","children":[]},{"level":3,"title":"2.2 三阶段进程创建模型","slug":"_2-2-三阶段进程创建模型","link":"#_2-2-三阶段进程创建模型","children":[]},{"level":3,"title":"2.3 nsenter 核心实现","slug":"_2-3-nsenter-核心实现","link":"#_2-3-nsenter-核心实现","children":[]}]},{"level":2,"title":"3. Namespace 创建流程详解","slug":"_3-namespace-创建流程详解","link":"#_3-namespace-创建流程详解","children":[{"level":3,"title":"3.1 阶段0: 父进程 (STAGE_PARENT)","slug":"_3-1-阶段0-父进程-stage-parent","link":"#_3-1-阶段0-父进程-stage-parent","children":[]},{"level":3,"title":"3.2 阶段1: 中间子进程 (STAGE_CHILD)","slug":"_3-2-阶段1-中间子进程-stage-child","link":"#_3-2-阶段1-中间子进程-stage-child","children":[]},{"level":3,"title":"3.3 阶段2: 最终 init 进程 (STAGE_INIT)","slug":"_3-3-阶段2-最终-init-进程-stage-init","link":"#_3-3-阶段2-最终-init-进程-stage-init","children":[]}]},{"level":2,"title":"4. Go 运行时集成","slug":"_4-go-运行时集成","link":"#_4-go-运行时集成","children":[{"level":3,"title":"4.1 标准初始化流程","slug":"_4-1-标准初始化流程","link":"#_4-1-标准初始化流程","children":[]},{"level":3,"title":"4.2 网络配置示例","slug":"_4-2-网络配置示例","link":"#_4-2-网络配置示例","children":[]},{"level":3,"title":"4.3 主机名设置示例","slug":"_4-3-主机名设置示例","link":"#_4-3-主机名设置示例","children":[]}]},{"level":2,"title":"5. Namespace 创建顺序和依赖关系","slug":"_5-namespace-创建顺序和依赖关系","link":"#_5-namespace-创建顺序和依赖关系","children":[{"level":3,"title":"5.1 创建顺序原则","slug":"_5-1-创建顺序原则","link":"#_5-1-创建顺序原则","children":[]},{"level":3,"title":"5.2 依赖关系详解","slug":"_5-2-依赖关系详解","link":"#_5-2-依赖关系详解","children":[]},{"level":3,"title":"5.3 同步机制详解","slug":"_5-3-同步机制详解","link":"#_5-3-同步机制详解","children":[]}]},{"level":2,"title":"6. 高级特性和优化","slug":"_6-高级特性和优化","link":"#_6-高级特性和优化","children":[{"level":3,"title":"6.1 时间命名空间处理","slug":"_6-1-时间命名空间处理","link":"#_6-1-时间命名空间处理","children":[]},{"level":3,"title":"6.2 Rootless 容器支持","slug":"_6-2-rootless-容器支持","link":"#_6-2-rootless-容器支持","children":[]},{"level":3,"title":"6.3 性能优化","slug":"_6-3-性能优化","link":"#_6-3-性能优化","children":[]}]},{"level":2,"title":"7. 调试和故障排除","slug":"_7-调试和故障排除","link":"#_7-调试和故障排除","children":[{"level":3,"title":"7.1 常见问题诊断","slug":"_7-1-常见问题诊断","link":"#_7-1-常见问题诊断","children":[]},{"level":3,"title":"7.2 性能分析","slug":"_7-2-性能分析","link":"#_7-2-性能分析","children":[]}]},{"level":2,"title":"8. 实践练习","slug":"_8-实践练习","link":"#_8-实践练习","children":[{"level":3,"title":"8.1 手动创建 Namespace","slug":"_8-1-手动创建-namespace","link":"#_8-1-手动创建-namespace","children":[]},{"level":3,"title":"8.2 自定义 Namespace 配置","slug":"_8-2-自定义-namespace-配置","link":"#_8-2-自定义-namespace-配置","children":[]},{"level":3,"title":"8.3 Namespace 性能测试","slug":"_8-3-namespace-性能测试","link":"#_8-3-namespace-性能测试","children":[]},{"level":3,"title":"8.4 调试 runc Namespace 创建","slug":"_8-4-调试-runc-namespace-创建","link":"#_8-4-调试-runc-namespace-创建","children":[]}]},{"level":2,"title":"9. 思考题","slug":"_9-思考题","link":"#_9-思考题","children":[{"level":3,"title":"9.1 架构设计思考","slug":"_9-1-架构设计思考","link":"#_9-1-架构设计思考","children":[]},{"level":3,"title":"9.2 技术实现思考","slug":"_9-2-技术实现思考","link":"#_9-2-技术实现思考","children":[]},{"level":3,"title":"9.3 安全性思考","slug":"_9-3-安全性思考","link":"#_9-3-安全性思考","children":[]},{"level":3,"title":"9.4 扩展性思考","slug":"_9-4-扩展性思考","link":"#_9-4-扩展性思考","children":[]}]},{"level":2,"title":"10. 扩展阅读","slug":"_10-扩展阅读","link":"#_10-扩展阅读","children":[{"level":3,"title":"10.1 Linux 内核文档","slug":"_10-1-linux-内核文档","link":"#_10-1-linux-内核文档","children":[]},{"level":3,"title":"10.2 系统调用参考","slug":"_10-2-系统调用参考","link":"#_10-2-系统调用参考","children":[]},{"level":3,"title":"10.3 深入学习资源","slug":"_10-3-深入学习资源","link":"#_10-3-深入学习资源","children":[]}]},{"level":2,"title":"🎯 模块总结","slug":"🎯-模块总结","link":"#🎯-模块总结","children":[]}],"git":{"createdTime":1754503646000,"updatedTime":1754503646000,"contributors":[{"name":"hushengnian","email":"hushengnian@example.com","commits":1}]},"filePathRelative":"blogs/cloud-base/runc-deep-dive/03-Namespace隔离实现.md"}');export{I as comp,S as data};
