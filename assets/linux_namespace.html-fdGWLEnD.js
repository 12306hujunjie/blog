import{_ as e,c as s,d as n,o as i}from"./app--xDOKwpD.js";const l={};function p(r,a){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="linux-命名空间学习" tabindex="-1"><a class="header-anchor" href="#linux-命名空间学习"><span>Linux 命名空间学习</span></a></h1><h2 id="什么是命名空间" tabindex="-1"><a class="header-anchor" href="#什么是命名空间"><span>什么是命名空间</span></a></h2><p>在 Linux 中，命名空间是一种隔离机制，用于隔离系统资源的视图，例如进程 ID、网络接口和文件系统挂载点等。使用命名空间可以创建一种虚拟的环境，在这个环境中，系统资源的视图与整个系统的视图是分离的。这使得应用程序和服务可以在隔离的环境中运行，而不会干扰系统中其他应用程序和服务的运行。</p><p>命名空间的种类 Linux 中支持多种类型的命名空间。以下是常用的命名空间类型：</p><h2 id="pid-命名空间" tabindex="-1"><a class="header-anchor" href="#pid-命名空间"><span>PID 命名空间</span></a></h2><p>PID 命名空间用于隔离进程 ID。在一个 PID 命名空间中，每个进程都有一个唯一的 PID，即使在系统的其他命名空间中也是如此。 好的，下面是有关 PID 命名空间的详细信息，包括命令的使用和最佳实践：</p><h3 id="pid-命名空间详解" tabindex="-1"><a class="header-anchor" href="#pid-命名空间详解"><span>PID 命名空间详解</span></a></h3><p>PID 命名空间用于隔离进程 ID。在一个 PID 命名空间中，每个进程都有一个唯一的 PID，即使在系统的其他命名空间中也是如此。这使得应用程序和服务可以在隔离的环境中运行，而不会干扰系统中其他应用程序和服务的运行。</p><h4 id="创建-pid-命名空间" tabindex="-1"><a class="header-anchor" href="#创建-pid-命名空间"><span>创建 PID 命名空间</span></a></h4><p>使用 <code>unshare</code> 命令可以创建一个新的 PID 命名空间，例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> unshare <span class="token parameter variable">--pid</span> <span class="token parameter variable">--fork</span> <span class="token function">bash</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令将创建一个新的 bash shell 进程，并在新的 PID 命名空间中运行它。</p><h4 id="查看-pid-命名空间" tabindex="-1"><a class="header-anchor" href="#查看-pid-命名空间"><span>查看 PID 命名空间</span></a></h4><p>使用 <code>lsns</code> 命令可以查看当前系统上所有命名空间的详细信息，例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> lsns <span class="token parameter variable">-p</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令将列出所有命名空间的 PID 和命名空间类型。</p><h4 id="在-pid-命名空间中运行应用程序" tabindex="-1"><a class="header-anchor" href="#在-pid-命名空间中运行应用程序"><span>在 PID 命名空间中运行应用程序</span></a></h4><p>使用 <code>nsenter</code> 命令可以将 shell 进程加入到指定的命名空间中，并在该命名空间中运行应用程序，例如：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token function">sudo</span> nsenter <span class="token parameter variable">--pid</span> <span class="token parameter variable">--target</span> <span class="token operator">&lt;</span>PID<span class="token operator">&gt;</span> -- <span class="token function">ls</span> <span class="token parameter variable">-l</span> /proc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>该命令将进入到指定的 PID 命名空间中，并列出该命名空间中的 /proc 目录。</p><h4 id="最佳实践" tabindex="-1"><a class="header-anchor" href="#最佳实践"><span>最佳实践</span></a></h4><p>以下是使用 PID 命名空间的最佳实践：</p><ul><li>在容器中使用 PID 命名空间，可以避免应用程序和服务之间 PID 的冲突，提高容器的安全性和隔离性。</li><li>在调试进程时，可以使用 PID 命名空间隔离出要调试的进程，以避免影响其他进程的运行。</li><li>在测试脚本中，可以使用 PID 命名空间隔离测试用例，以确保测试用例之间的隔离性和独立性。</li></ul><h2 id="network-命名空间" tabindex="-1"><a class="header-anchor" href="#network-命名空间"><span>Network 命名空间</span></a></h2><p>网络命名空间用于隔离网络资源，例如网络接口、IP 地址和路由表等。在一个网络命名空间中，应用程序和服务可以拥有它们自己的网络视图，而不会干扰其他命名空间中的网络。</p><h2 id="mount-命名空间" tabindex="-1"><a class="header-anchor" href="#mount-命名空间"><span>Mount 命名空间</span></a></h2><p>挂载命名空间用于隔离文件系统挂载点。在一个挂载命名空间中，应用程序和服务可以拥有它们自己的文件系统视图，而不会干扰其他命名空间中的文件系统。</p><h4 id="uts-命名空间" tabindex="-1"><a class="header-anchor" href="#uts-命名空间"><span>UTS 命名空间</span></a></h4><p>UTS 命名空间用于隔离主机名和域名。在一个 UTS 命名空间中，应用程序和服务可以拥有它们自己的主机名和域名，而不会干扰其他命名空间中的主机名和域名。</p><h4 id="ipc-命名空间" tabindex="-1"><a class="header-anchor" href="#ipc-命名空间"><span>IPC 命名空间</span></a></h4><p>IPC 命名空间用于隔离进程间通信（IPC）机制，例如消息队列、信号量和共享内存等。在一个 IPC 命名空间中，应用程序和服务可以拥有它们自己的 IPC 资源，而不会干扰其他命名空间中的 IPC 资源。</p><h4 id="user-命名空间" tabindex="-1"><a class="header-anchor" href="#user-命名空间"><span>User 命名空间</span></a></h4><p>用户命名空间用于隔离用户和用户组。在一个用户命名空间中，应用程序和服务可以拥有它们自己的用户和用户组，而不会干扰其他命名空间中的用户和用户组。</p>`,33)]))}const d=e(l,[["render",p]]),c=JSON.parse('{"path":"/blogs/linux/linux_namespace.html","title":"linux namespace","lang":"en-US","frontmatter":{"title":"linux namespace","date":"2023-04-24T00:00:00.000Z","tags":["linux","namespace","容器技术","系统原理","虚拟化","中级","底层技术"],"categories":["linux"],"sidebar":"auto"},"headers":[{"level":2,"title":"什么是命名空间","slug":"什么是命名空间","link":"#什么是命名空间","children":[]},{"level":2,"title":"PID 命名空间","slug":"pid-命名空间","link":"#pid-命名空间","children":[{"level":3,"title":"PID 命名空间详解","slug":"pid-命名空间详解","link":"#pid-命名空间详解","children":[]}]},{"level":2,"title":"Network 命名空间","slug":"network-命名空间","link":"#network-命名空间","children":[]},{"level":2,"title":"Mount 命名空间","slug":"mount-命名空间","link":"#mount-命名空间","children":[]}],"git":{"createdTime":1752125632000,"updatedTime":1752125632000,"contributors":[{"name":"户盛年","email":"hushengnian@hushengniandeMacBook-Air.local","commits":1}]},"filePathRelative":"blogs/linux/linux_namespace.md"}');export{d as comp,c as data};
