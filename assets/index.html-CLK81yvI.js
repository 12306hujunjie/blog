import{_ as r,c as s,a as l,b as i,e as t,d as o,r as d,o as a}from"./app-Azxq6kow.js";const u={},p={href:"https://leetcode.cn/",target:"_blank",rel:"noopener noreferrer"},h={id:"_1-数组和字符串",tabindex:"-1"},_={class:"header-anchor",href:"#_1-数组和字符串"},b={href:"https://leetcode.cn/leetbook/detail/array-and-string/",target:"_blank",rel:"noopener noreferrer"},k={id:"_2-二分查找",tabindex:"-1"},f={class:"header-anchor",href:"#_2-二分查找"},g={href:"https://leetcode.cn/leetbook/detail/binary-search/",target:"_blank",rel:"noopener noreferrer"},x={id:"_3-队列和栈",tabindex:"-1"},m={class:"header-anchor",href:"#_3-队列和栈"},v={href:"https://leetcode.cn/leetbook/detail/queue-stack/",target:"_blank",rel:"noopener noreferrer"},w={id:"_4-链表",tabindex:"-1"},y={class:"header-anchor",href:"#_4-链表"},N={href:"https://leetcode.cn/leetbook/detail/linked-list/",target:"_blank",rel:"noopener noreferrer"},j={id:"_5-哈希表",tabindex:"-1"},B={class:"header-anchor",href:"#_5-哈希表"},V={href:"https://leetcode.cn/leetbook/detail/hash-table-plus/",target:"_blank",rel:"noopener noreferrer"},E={id:"_6-滑动窗口和双指针",tabindex:"-1"},I={class:"header-anchor",href:"#_6-滑动窗口和双指针"},S={href:"https://leetcode.cn/leetbook/detail/sliding-window-and-two-pointers/",target:"_blank",rel:"noopener noreferrer"},T={id:"_7-二叉树",tabindex:"-1"},q={class:"header-anchor",href:"#_7-二叉树"},C={href:"https://leetcode.cn/leetbook/detail/data-structure-binary-tree/",target:"_blank",rel:"noopener noreferrer"},L={id:"_8-n叉树",tabindex:"-1"},M={class:"header-anchor",href:"#_8-n叉树"},R={href:"https://leetcode.cn/leetbook/detail/n-ary-tree/",target:"_blank",rel:"noopener noreferrer"},A={id:"_9-二叉搜索树",tabindex:"-1"},G={class:"header-anchor",href:"#_9-二叉搜索树"},J={href:"https://leetcode.cn/leetbook/detail/introduction-to-data-structure-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"},O={id:"_10-堆",tabindex:"-1"},P={class:"header-anchor",href:"#_10-堆"},U={href:"https://leetcode.cn/leetbook/detail/heap/",target:"_blank",rel:"noopener noreferrer"},W={id:"_11-深度优先搜索进阶",tabindex:"-1"},z={class:"header-anchor",href:"#_11-深度优先搜索进阶"},D={href:"https://leetcode.cn/leetbook/detail/dfs/",target:"_blank",rel:"noopener noreferrer"},F={id:"_12-广度优先搜索进阶",tabindex:"-1"},H={class:"header-anchor",href:"#_12-广度优先搜索进阶"},K={href:"https://leetcode.cn/leetbook/detail/bfs/",target:"_blank",rel:"noopener noreferrer"},Q={id:"_13-贪心算法",tabindex:"-1"},X={class:"header-anchor",href:"#_13-贪心算法"},Y={href:"https://leetcode.cn/leetbook/detail/greedy/",target:"_blank",rel:"noopener noreferrer"},Z={id:"_14-动态规划路径问题",tabindex:"-1"},$={class:"header-anchor",href:"#_14-动态规划路径问题"},c={href:"https://leetcode.cn/leetbook/detail/path-problems-in-dynamic-programming/",target:"_blank",rel:"noopener noreferrer"};function ee(le,e){const n=d("ExternalLinkIcon");return a(),s("div",null,[l("blockquote",null,[l("p",null,[e[1]||(e[1]=t("很多时候第一步迈出很难，是改变的开始，也是痛苦的结束。")),e[2]||(e[2]=l("br",null,null,-1)),e[3]||(e[3]=t(" 五月，也是上海2022疫情危机的时刻，当时公司业务陷入停滞，我和另外一名同事在降薪两个月后被迫选择休假在家度过，我逐渐意识到，如果再不改变，很有可能也成为35岁危机的一员，没有人是不可替代的，只有更努力一点，让自己可被替代的成本更高一点，从那时开始，我选择了")),l("a",p,[e[0]||(e[0]=t("leetcode")),o(n)]),e[4]||(e[4]=t("，开始在工作之余刷题。")),e[5]||(e[5]=l("br",null,null,-1)),e[6]||(e[6]=t(" 从经典的两数之和开始，我发现一切都是那么难，很多题目根本想不到它的解题点在哪里，于是我很快就放弃了直接刷题，选择在b站上找了一个算法基础的入门视频先看看，但直接看视频最大的一点就是你大概率容易犯懒并放弃思考，看一天视频结束，剩下的只有困倦和疲惫，这些东西当时看似是记住了，过几天又忘了，更加深了我的犯难心理。")),e[7]||(e[7]=l("br",null,null,-1)),e[8]||(e[8]=t(" 从6月开始, 我开始转换思路，筛选所有力扣的基础算法学习书籍，先学基本数据结构，再学基本算法，数组，链表，栈， 队列 到 哈希表，二叉树，对应学习的 排序算法，双指针，滑动窗口，二分法，前缀和，位运算，深度优先算法，广度优先算法，初步总结了一些可用的有效方法归纳了一系列基础算法模板，再到最后的图(暂进行中)，到如今也算是慢慢有所经验"))])]),e[37]||(e[37]=i('<div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>从每个基础数据结构开始学起，充分使用它们的特性，同时不同的数据结构也有各种巧妙的算法思想，通过对基本数据结构和基础的算法的渐进式掌握，逐渐就会知晓如何组合使用去解决更困难的问题</p></div><h2 id="推荐学习leetcode书目顺序以及算法内容-持续更新" tabindex="-1"><a class="header-anchor" href="#推荐学习leetcode书目顺序以及算法内容-持续更新"><span>推荐学习leetcode书目顺序以及算法内容(持续更新)</span></a></h2>',2)),l("h3",h,[l("a",_,[l("span",null,[e[10]||(e[10]=t("1. ")),l("a",b,[e[9]||(e[9]=t("数组和字符串")),o(n)])])])]),e[38]||(e[38]=l("ul",null,[l("li",null,"单指针的迭代(简单)"),l("li",null,"双指针双向迭代(简单偏中等)"),l("li",null,"双指针同向迭代(经典滑动窗口问题)")],-1)),l("h3",k,[l("a",f,[l("span",null,[e[12]||(e[12]=t("2. ")),l("a",g,[e[11]||(e[11]=t("二分查找")),o(n)])])])]),e[39]||(e[39]=l("p",null,"基础问题主要是基于有序数组，但是我们要注意，二分法的思想在于二分而不在于有序，这里的难点主要在于如何构造二分问题和处理二分的边界问题(红蓝二分法)",-1)),e[40]||(e[40]=l("ul",null,[l("li",null,"基于有序非重复数组的二分(基础)"),l("li",null,"基于有序可重复数组的二分(进阶)"),l("li",null,"基于无序非重复数组的二分(注意二分性)"),l("li",null,"基于非有序可重复数组的二分(注意如何预处理数组而达成可二分的处理) 以上可优先做[寻找旋转排序数组]系列题目感受"),l("li",null,"非有序数组的二分思想构造题(如何识别问题的二分性，通过对问题的预处理而达成可二分的效果) 以上需要在二分的tag系列题目或者二分法的进阶学习计划中感受")],-1)),l("h3",x,[l("a",m,[l("span",null,[e[14]||(e[14]=t("3. ")),l("a",v,[e[13]||(e[13]=t("队列和栈")),o(n)])])])]),e[41]||(e[41]=l("p",null,"本书介绍了队列的设计实现和使用队列先入先出和栈先入后出的结构巧妙地解决一些问题，开始接触递归思想(深度优先)",-1)),e[42]||(e[42]=l("ol",null,[l("li",null,"广度优先算法思想(队列)"),l("li",null,"深度优先算法思想(栈)(通过迭代版可了解二者的不同处，但一般深度优先算法使用系统栈递归调用减少复杂性)")],-1)),l("h3",w,[l("a",y,[l("span",null,[e[16]||(e[16]=t("4. ")),l("a",N,[e[15]||(e[15]=t("链表")),o(n)])])])]),e[43]||(e[43]=l("p",null,"可以单独学习的数据结构，与其他书籍关联程度不高，一般刷完第一本数组和字符串就可以学习 通过递归和迭代的实现，可巩固之前学习内容",-1)),e[44]||(e[44]=l("ol",null,[l("li",null,"虚拟头节点"),l("li",null,"快慢指针"),l("li",null,"递归")],-1)),l("h3",j,[l("a",B,[l("span",null,[e[18]||(e[18]=t("5. ")),l("a",V,[e[17]||(e[17]=t("哈希表")),o(n)])])])]),e[45]||(e[45]=l("p",null,"学习哈希表的设计思想以及使用方式，通过使用哈希表和集合记录数据个数和去重",-1)),l("h3",E,[l("a",I,[l("span",null,[e[20]||(e[20]=t("6. ")),l("a",S,[e[19]||(e[19]=t("滑动窗口和双指针")),o(n)])])])]),e[46]||(e[46]=l("p",null,"针对滑动窗口和双指针的进阶学习",-1)),l("h3",T,[l("a",q,[l("span",null,[e[22]||(e[22]=t("7. ")),l("a",C,[e[21]||(e[21]=t("二叉树")),o(n)])])])]),e[47]||(e[47]=l("ol",null,[l("li",null,"二叉树结构的前序，中序，后续，层序遍历，构造(只能从前序和中序或者中序和后序构造而来)"),l("li",null,"递归思想进阶(递归问题中的状态转移和结果处理，前序(自上而下)和后序(自下而上)的不同方式如何解决问题)")],-1)),l("h3",L,[l("a",M,[l("span",null,[e[24]||(e[24]=t("8. ")),l("a",R,[e[23]||(e[23]=t("n叉树")),o(n)])])])]),e[48]||(e[48]=l("p",null,"从以上二叉树问题转移而来的n叉树问题，比较简单，可以巩固一下",-1)),l("h3",A,[l("a",G,[l("span",null,[e[26]||(e[26]=t("9. ")),l("a",J,[e[25]||(e[25]=t("二叉搜索树")),o(n)])])])]),e[49]||(e[49]=l("p",null,"通过学习这个特殊的二叉树的特性，拓展了对平衡树的理解，如何通过树这种特殊的结构满足数据的二分性，同时通过平衡操作保证树的性能(一个普通的二叉搜索树，在最坏的情况下，它可以退化成一个链)",-1)),l("h3",O,[l("a",P,[l("span",null,[e[28]||(e[28]=t("10. ")),l("a",U,[e[27]||(e[27]=t("堆")),o(n)])])])]),e[50]||(e[50]=l("p",null,"堆就是一个特殊的完全二叉树，通过堆的学习使用如何做数据的排序以及学习如何解决topk问题",-1)),l("h3",W,[l("a",z,[l("span",null,[e[30]||(e[30]=t("11. ")),l("a",D,[e[29]||(e[29]=t("深度优先搜索进阶")),o(n)])])])]),l("h3",F,[l("a",H,[l("span",null,[e[32]||(e[32]=t("12. ")),l("a",K,[e[31]||(e[31]=t("广度优先搜索进阶")),o(n)])])])]),l("h3",Q,[l("a",X,[l("span",null,[e[34]||(e[34]=t("13. ")),l("a",Y,[e[33]||(e[33]=t("贪心算法")),o(n)])])])]),l("h3",Z,[l("a",$,[l("span",null,[e[36]||(e[36]=t("14. ")),l("a",c,[e[35]||(e[35]=t("动态规划路径问题")),o(n)])])])])])}const ne=r(u,[["render",ee]]),oe=JSON.parse('{"path":"/docs/leetcode/","title":"","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"推荐学习leetcode书目顺序以及算法内容(持续更新)","slug":"推荐学习leetcode书目顺序以及算法内容-持续更新","link":"#推荐学习leetcode书目顺序以及算法内容-持续更新","children":[{"level":3,"title":"1. 数组和字符串","slug":"_1-数组和字符串","link":"#_1-数组和字符串","children":[]},{"level":3,"title":"2. 二分查找","slug":"_2-二分查找","link":"#_2-二分查找","children":[]},{"level":3,"title":"3. 队列和栈","slug":"_3-队列和栈","link":"#_3-队列和栈","children":[]},{"level":3,"title":"4. 链表","slug":"_4-链表","link":"#_4-链表","children":[]},{"level":3,"title":"5. 哈希表","slug":"_5-哈希表","link":"#_5-哈希表","children":[]},{"level":3,"title":"6. 滑动窗口和双指针","slug":"_6-滑动窗口和双指针","link":"#_6-滑动窗口和双指针","children":[]},{"level":3,"title":"7. 二叉树","slug":"_7-二叉树","link":"#_7-二叉树","children":[]},{"level":3,"title":"8. n叉树","slug":"_8-n叉树","link":"#_8-n叉树","children":[]},{"level":3,"title":"9. 二叉搜索树","slug":"_9-二叉搜索树","link":"#_9-二叉搜索树","children":[]},{"level":3,"title":"10. 堆","slug":"_10-堆","link":"#_10-堆","children":[]},{"level":3,"title":"11. 深度优先搜索进阶","slug":"_11-深度优先搜索进阶","link":"#_11-深度优先搜索进阶","children":[]},{"level":3,"title":"12. 广度优先搜索进阶","slug":"_12-广度优先搜索进阶","link":"#_12-广度优先搜索进阶","children":[]},{"level":3,"title":"13. 贪心算法","slug":"_13-贪心算法","link":"#_13-贪心算法","children":[]},{"level":3,"title":"14. 动态规划路径问题","slug":"_14-动态规划路径问题","link":"#_14-动态规划路径问题","children":[]}]}],"git":{"createdTime":1751905673000,"updatedTime":1751905673000,"contributors":[{"name":"12306hujunjie","email":"45376018+12306hujunjie@users.noreply.github.com","commits":1}]},"filePathRelative":"docs/leetcode/index.md"}');export{ne as comp,oe as data};
