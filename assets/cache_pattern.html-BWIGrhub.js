import{_ as a,c as n,a as s,o as i}from"./app-2O6audqE.js";const t={};function c(o,e){return i(),n("div",null,e[0]||(e[0]=[s(`<h1 id="缓存主要有以下几种模式" tabindex="-1"><a class="header-anchor" href="#缓存主要有以下几种模式"><span>缓存主要有以下几种模式</span></a></h1><ol><li><code>cache-aside</code><br> 应用请求先走缓存，缓存未命中则查数据库，然后由应用更新到缓存(常用的业务缓存模式，对缓存失效有一定的容忍性，缓存中数据模型与数据库中的数据模型可以不同)</li><li>直读(<code>read-through</code>)<br> 与<code>cache-aside</code>很接近，应用请求走缓存，但是应用与数据库不链接，由缓存自动从数据库同步数据</li><li>直写(<code>write-through</code>)<br> 与上两种读缓存不一样的是，应用会将数据直接写入缓存，由缓存自动同步数据到数据库 (与<code>read-through</code>相结合可以很好的解决读写数据不一致的问题，由缓存写入数据库)</li><li>绕写(<code>write-around</code>)<br> 其实不会用到缓存，而是直接写入到数据库中(配合<code>cache-aside</code>/<code>read-through</code>使用, 只在缓存未命中的情况下写缓存)</li><li>回写(<code>write-back</code>)<br> 与<code>write-through</code>写入数据库时机不同，每隔一段时间或者当数据将要被移除缓存的时候将数据批量更新到数据库</li></ol><hr><h1 id="主要搭配使用类型" tabindex="-1"><a class="header-anchor" href="#主要搭配使用类型"><span>主要搭配使用类型</span></a></h1><h2 id="_1-cache-aside" tabindex="-1"><a class="header-anchor" href="#_1-cache-aside"><span>1. <code>cache-aside</code></span></a></h2><h3 id="_1-第一种策略" tabindex="-1"><a class="header-anchor" href="#_1-第一种策略"><span>1. 第一种策略:</span></a></h3><pre><code>  1. 更新数据库  
  2. 更新缓存
</code></pre><div class="custom-container warning"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8v4"></path><path d="M12 16h.01"></path></g></svg><p class="custom-container-title">WARNING</p><p>这个策略有线程安全的问题，可能出现缓存和数据库不一致的问题(如果有两个写线程先后写完数据库，但旧数据后写缓存就会导致脏数据)。这里可以考虑做增量缓存更新的场景, 比如：<br> 1. 点赞和取消点赞 2. 点踩或者取消点踩<br> 3. 评论计数增量更新 等</p></div><h3 id="_2-第二种策略" tabindex="-1"><a class="header-anchor" href="#_2-第二种策略"><span>2. 第二种策略:</span></a></h3><pre><code>  1. 更新数据库  
  2. 删除缓存
</code></pre><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>这个策略也可能会出现线程安全的问题(A读B写，A线程<code>cache miss</code>从数据库中获取数据,B写数据库，B删缓存，A由于网络延迟，将脏数据写入缓存)<br> 但是这个策略由于需要满足比较苛刻的条件(即统一时间内写操作比读操作快且写操作在读写缓存操作的中间时间段)几乎不太可能发生,所以我们一般可以使用这种策略 ,另外再设置合适的过期时间，即使发生脏数据的情况，也不会发生很长时间(适合写频率适中且读操作偏多的情况)</p></div><p>PS:<strong>应用于缓存不支持<code>read-through/write-through</code>的系统，适用于读写频次适中的系统</strong></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>优点:<br> 1. 缓存仅用于被请求的数据,属于惰性加载(<code>lazy-loading</code>)</p><p>缺点:</p><ol><li>发生<code>cache miss</code> 的情况时比较慢，因为要处理三个步骤：查询缓存，读数据库，写缓存</li><li>缓存逻辑都放在应用程序中，增加了复杂度</li></ol></div><h2 id="_2-read-through-write-through直读直写" tabindex="-1"><a class="header-anchor" href="#_2-read-through-write-through直读直写"><span>2. <code>read-through/write-through</code>直读直写</span></a></h2><p>在这种模式中，应用将缓存作为数据源，更新数据和读取数据由缓存代理，减少应用处理缓存的复杂度 适合读多，写频次适中的应用</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>优点:</p><ol><li>读写非常快</li><li>缓存不存在脏数据</li><li>相比较<code>cache-aside</code>模式，读取速度更高</li><li>应用逻辑比较简单<br> 缺点:</li><li>对于写多读少的应用, <code>write-through</code>很浪费性能，多次写入却很少读取，白白增加了每次都写入缓存的延迟</li><li>由缓存代理数据库，缓存模型必须与数据库模型保持一致</li></ol></div><h2 id="_3-read-through-write-back直读回写" tabindex="-1"><a class="header-anchor" href="#_3-read-through-write-back直读回写"><span>3. <code>read-through/write-back</code>直读回写</span></a></h2><p>与直写的写入实际不同，回写将缓存作为可靠数据源，每次都只写入缓存，写入数据库则采用异步批量写入， 适用于读写频次都非常高的应用</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>优点:</p><ol><li>读写非常快</li><li>减少了写库的频率，增加写入性能<br> 缺点:</li><li>有数据批量丢失的风险，如果缓存挂掉而没有即时写到数据库中，那么缓存中的数据将永久丢失</li></ol></div><h2 id="_4-read-through-write-around直读绕写" tabindex="-1"><a class="header-anchor" href="#_4-read-through-write-around直读绕写"><span>4. <code>read-through/write-around</code>直读绕写</span></a></h2><p>更新直接写入数据库，不写缓存，由缓存自动从数据库拉取数据，应用读取缓存，适用于写少读少的应用</p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>优点:</p><ol><li>相比较<code>write-through</code>写入的时候的效率较高，如果数据写入后很少被读取，缓存也不会被没用到的数据占满。</li></ol><p>缺点:</p><ol><li>如果数据会写入多次，那么可能存在缓存和数据库不一致</li></ol></div><h2 id="具体实践场景-redis" tabindex="-1"><a class="header-anchor" href="#具体实践场景-redis"><span>具体实践场景(<code>redis</code>)</span></a></h2><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>日常使用比较常用的就是<code>cache-aside</code>了，但是不同策略针对的缓存处理也不同， 如果在点赞的场景，更新评论数点赞数等都是高频写入，就不建议做删除缓存的策略</p></div><h2 id="cache-aside" tabindex="-1"><a class="header-anchor" href="#cache-aside"><span><code>cache-aside</code></span></a></h2><ul><li>第一种场景，更新缓存时会出现线程安全问题，这时候可以考虑一下redis watch机制，操作新增一个user_id或者减少一个user_id, 重点是要基于redis缓存内数据的修改，<code>python</code>代码如下</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">with</span> redis<span class="token punctuation">.</span>pipeline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> p<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">:</span></span>
<span class="line">            p<span class="token punctuation">.</span>watch<span class="token punctuation">(</span>cache_key<span class="token punctuation">)</span></span>
<span class="line">            <span class="token comment"># do something like</span></span>
<span class="line">            <span class="token comment"># 1. get value from redis 此时 value 对应的 cache_key 在 watch 时不会发生变化，可以放心读取</span></span>
<span class="line">            <span class="token comment"># 2. update value to add id or delete id  # 内存操作增删数据</span></span>
<span class="line">            <span class="token comment">#p.multi()</span></span>
<span class="line">            <span class="token comment">#p.set | sadd | hset 写入数据</span></span>
<span class="line">            p<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token keyword">except</span> WatchError<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">continue</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>watch时如果这个缓存有修改，就会直接抛<code>watchError</code>，保证该更新(在<code>redis pipline</code>的<code>multi</code>操作和<code>execute</code>操作之间的更新操作)是原子独立的， 如果对应数据是数字的话，可以用<code>redis</code>自带的<code>increment</code>机制，先判断缓存是否存在，没有就从数据库获取最新数据并写入缓存<br> 当每个操作只涉及到对具体缓存的增量修改的时候, 就不在乎先后了，每个操作都是原子的独立的 通过更新缓存减少<code>cache miss</code> 的频率</p><ul><li>第二种场景, 适用于写少读多的场景，在操作数据库修改数据之后直接删除缓存，方便快捷</li></ul>`,29)]))}const l=a(t,[["render",c]]),d=JSON.parse('{"path":"/blogs/cache/cache_pattern.html","title":"缓存模式设计与实践","lang":"en-US","frontmatter":{"title":"缓存模式设计与实践","date":"2022-03-01T00:00:00.000Z","tags":["缓存设计","系统设计","redis","设计模式","分布式系统","中级","生产环境"],"categories":["cache"],"sidebar":"auto"},"headers":[{"level":2,"title":"1. cache-aside","slug":"_1-cache-aside","link":"#_1-cache-aside","children":[{"level":3,"title":"1. 第一种策略:","slug":"_1-第一种策略","link":"#_1-第一种策略","children":[]},{"level":3,"title":"2. 第二种策略:","slug":"_2-第二种策略","link":"#_2-第二种策略","children":[]}]},{"level":2,"title":"2. read-through/write-through直读直写","slug":"_2-read-through-write-through直读直写","link":"#_2-read-through-write-through直读直写","children":[]},{"level":2,"title":"3.  read-through/write-back直读回写","slug":"_3-read-through-write-back直读回写","link":"#_3-read-through-write-back直读回写","children":[]},{"level":2,"title":"4.  read-through/write-around直读绕写","slug":"_4-read-through-write-around直读绕写","link":"#_4-read-through-write-around直读绕写","children":[]},{"level":2,"title":"具体实践场景(redis)","slug":"具体实践场景-redis","link":"#具体实践场景-redis","children":[]},{"level":2,"title":"cache-aside","slug":"cache-aside","link":"#cache-aside","children":[]}],"git":{"createdTime":1754503646000,"updatedTime":1754503646000,"contributors":[{"name":"hushengnian","email":"hushengnian@example.com","commits":1}]},"filePathRelative":"blogs/cache/cache_pattern.md"}');export{l as comp,d as data};
