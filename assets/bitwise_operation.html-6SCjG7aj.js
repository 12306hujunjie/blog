import{_ as r,c as u,a as n,d as i,b as e,e as s,w as l,r as c,o as d}from"./app-POvm5W0X.js";const k={},m={href:"https://baike.baidu.com/item/%E5%AE%9A%E7%82%B9%E6%95%B0?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},b={href:"https://baike.baidu.com/item/%E5%8E%9F%E7%A0%81/1097586?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},v={href:"https://baike.baidu.com/item/%E5%8F%8D%E7%A0%81/769985?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},h={href:"https://baike.baidu.com/item/%E8%A1%A5%E7%A0%81?fromModule=lemma_inlink",target:"_blank",rel:"noopener noreferrer"},g={href:"https://leetcode.cn/problems/bu-yong-jia-jian-cheng-chu-zuo-jia-fa-lcof/",target:"_blank",rel:"noopener noreferrer"},f={start:"2"},w={href:"https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/",target:"_blank",rel:"noopener noreferrer"};function y(x,a){const t=c("ExternalLinkIcon"),o=c("CodeGroupItem"),p=c("CodeGroup");return d(),u("div",null,[a[10]||(a[10]=n("h3",{id:"什么是位运算",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是位运算"},[n("span",null,"什么是位运算")])],-1)),a[11]||(a[11]=n("p",null,"位操作（Bit Manipulation）是程序设计中对位模式或二进制数的一元和二元操作。 在许多古老的微处理器上，位运算比加减运算略快，通常位运算比乘除法运算要快很多。 在现代编程语言中，情况并非如此，很多编程语言的解释器都会基本的运算进行了优化， 因此我们在实际开发中可以不必做一些编译器已经帮我们做好的优化， 而就写出代码本身所要表现的意思。",-1)),a[12]||(a[12]=n("h3",{id:"前置知识",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前置知识"},[n("span",null,"前置知识")])],-1)),a[13]||(a[13]=n("p",null,[n("strong",null,"计算机内部的数值")],-1)),n("ul",null,[n("li",null,[n("a",m,[a[0]||(a[0]=s("定点数")),e(t)])]),n("li",null,[n("a",b,[a[1]||(a[1]=s("原码")),e(t)])]),n("li",null,[n("a",v,[a[2]||(a[2]=s("反码")),e(t)])]),n("li",null,[n("a",h,[a[3]||(a[3]=s("补码")),e(t)])])]),a[14]||(a[14]=i(`<h3 id="基本的位运算操作" tabindex="-1"><a class="header-anchor" href="#基本的位运算操作"><span>基本的位运算操作</span></a></h3><ol><li><code>&amp;</code> 与， 两个位都为1时，结果才为1</li><li><code>|</code> 或， 两个都为0时，结果才为0</li><li><code>^</code> 异或, 两个位相同为0， 相异为1</li><li><code>~</code> 取反，0变1，1变0</li><li><code>&lt;&lt;</code> 左移，各个二进位全部左移若干位，高位丢弃，低位补0</li><li><code>&gt;&gt;</code> 右移，各二进位全部右移若干位，对无符号数，高位补0，有符号数， 各编译器处理方法不一样，有的补符号位（算术右移），有的补0（逻辑右移）</li></ol><h3 id="算法常用技巧" tabindex="-1"><a class="header-anchor" href="#算法常用技巧"><span>算法常用技巧</span></a></h3><ol><li>除法<br><code>a &gt;&gt; i</code> a 除以 2 的<code>i</code> 次方</li><li>乘法<br><code>a &lt;&lt; i</code> a 乘以 2 的<code>i</code> 次方</li><li>判断奇偶数<br><code>a &amp; 1</code> 变量<code>a</code>的最后一个二进制位值</li><li>统计二进制中1的个数 <code>a &amp; (a - 1)</code> 将变量<code>a</code>的二进制位最后一个1置0</li><li>查看第<code>i</code>个二进制位是否为1 (值为1或0)<br><code>(a &gt;&gt; i) &amp; 1</code></li><li>不用临时变量交换两个数</li></ol><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">a ^= b</span>
<span class="line">b ^= a</span>
<span class="line">a ^= b</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>取最后一个为1的位数()</li></ol><div class="language-python3 line-numbers-mode" data-highlighter="prismjs" data-ext="python3" data-title="python3"><pre><code><span class="line">a = 4</span>
<span class="line">mask = a &amp; -a</span>
<span class="line"># 也可这样实现</span>
<span class="line">ret = 1</span>
<span class="line">while a &amp; ret == 0:   # 从最低位开始按位与，如果当前为1则break，拿到的ret即为最后一个为1的数</span>
<span class="line">    ret &lt;&lt;= 1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>负数的补码展示是反码加一<br> 比如 <code>00000000 00000000 00000000 00000100</code> 原码4<br> 反码是所有取反<br><code>11111111 11111111 11111111 11111011</code><br> 补码 加一<br><code>11111111 11111111 11111111 11111100</code> -4的补码展示 取 4 &amp; -4 就会拿到最后为1的值，为<code>00000000 00000000 00000000 00000100</code>即4，<br> 前面再多个几个1，都是反码会被消掉</p></div><h3 id="技巧活用" tabindex="-1"><a class="header-anchor" href="#技巧活用"><span>技巧活用</span></a></h3>`,9)),n("ol",null,[n("li",null,[n("a",g,[a[4]||(a[4]=s("leetcode题目 不使用运算符实现加法")),e(t)])])]),a[15]||(a[15]=i('<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>Python，Java 等语言中的数字都是以 补码 形式存储的。但 Python 没有 int , long 等不同长度变量，即在编程时无变量位数的概念。 获取负数的补码： 需要将数字与十六进制数 0xffffffff 相与。可理解为舍去此数字 32 位以上的数字（将 32 位以上都变为 000 ），从无限长度变为一个 32 位整数。 返回前数字还原： 若补码 aaa 为负数（ 0x7fffffff 是最大的正数的补码 ），需执行 ~(a ^ x) 操作，将补码还原至 Python 的存储格式。 a ^ x 运算将 1 至 32 位按位取反； ~ 运算是将整个数字取反；因此， ~(a ^ x) 是将 32 位以上的位取反，1 至 32 位不变。</p></div>',1)),e(p,null,{default:l(()=>[e(o,{title:"python3"},{default:l(()=>a[5]||(a[5]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[s("a"),n("span",{class:"token punctuation"},","),s(" b "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"123"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"456")]),s(`
`),n("span",{class:"line"},[s("x "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0xffffffff")]),s(`
`),n("span",{class:"line"},[s("a"),n("span",{class:"token punctuation"},","),s(" b "),n("span",{class:"token operator"},"="),s(" x"),n("span",{class:"token operator"},"&"),s("a"),n("span",{class:"token punctuation"},","),s(" x"),n("span",{class:"token operator"},"&"),s("b    "),n("span",{class:"token comment"},"# 32位以上的数字置为0 获取负数补码")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"while"),s(" b "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    carry "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token operator"},"&"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"1"),s(),n("span",{class:"token operator"},"&"),s(" x   "),n("span",{class:"token comment"},"# a & b （两者都为1的时候进位）")]),s(`
`),n("span",{class:"line"},[s("    a "),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"="),s(" b                     "),n("span",{class:"token comment"},"# 除进位条件下其余满足加法运算 0^0=0,0^1=1")]),s(`
`),n("span",{class:"line"},[s("    b "),n("span",{class:"token operator"},"="),s(" carry                      "),n("span",{class:"token comment"},"# 将所有需要进位的当做b，仅需进行上述运算，直至b为0")]),s(`
`),n("span",{class:"line"},[s("a "),n("span",{class:"token operator"},"="),s(" a "),n("span",{class:"token keyword"},"if"),s(" a "),n("span",{class:"token operator"},"<="),s(" x "),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token operator"},"~"),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token operator"},"^"),s(" x"),n("span",{class:"token punctuation"},")"),s("    "),n("span",{class:"token comment"},"# 负数 32位以上取反， 1至32位不变")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"print"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[5]}),e(o,{title:"go"},{default:l(()=>a[6]||(a[6]=[n("div",{class:"language-go line-numbers-mode","data-highlighter":"prismjs","data-ext":"go","data-title":"go"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(" b "),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"for"),s(" b "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        carry "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token punctuation"},"("),s("a "),n("span",{class:"token operator"},"&"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"<<"),s(),n("span",{class:"token number"},"1")]),s(`
`),n("span",{class:"line"},[s("        a "),n("span",{class:"token operator"},"^="),s(" b")]),s(`
`),n("span",{class:"line"},[s("        b "),n("span",{class:"token operator"},"="),s(" carry")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"return"),s(" a")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[6]})]),_:1}),n("ol",f,[n("li",null,[n("a",w,[a[7]||(a[7]=s("leetcode 剑指 Offer 56 - I. 数组中数字出现的次数")),e(t)])])]),a[16]||(a[16]=i('<div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><ol><li>两个相同的数异或值为0</li><li>技巧7拿到最后一个不同的数</li><li>将两个出现一次的数字分成两组</li></ol></div>',1)),e(p,null,{default:l(()=>[e(o,{title:"python"},{default:l(()=>a[8]||(a[8]=[n("div",{class:"language-python line-numbers-mode","data-highlighter":"prismjs","data-ext":"py","data-title":"py"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"import"),s(" functools")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"from"),s(" typing "),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token operator"},"*")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"Solution"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"def"),s(),n("span",{class:"token function"},"singleNumbers"),n("span",{class:"token punctuation"},"("),s("self"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},":"),s(" List"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token operator"},">"),s(" List"),n("span",{class:"token punctuation"},"["),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("        ans "),n("span",{class:"token operator"},"="),s(" functools"),n("span",{class:"token punctuation"},"."),n("span",{class:"token builtin"},"reduce"),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"lambda"),s(" x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},":"),s("x"),n("span",{class:"token operator"},"^"),s("y"),n("span",{class:"token punctuation"},","),s(" nums"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("        ret "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"while"),s(" ans "),n("span",{class:"token operator"},"&"),s(" ret "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("            ret "),n("span",{class:"token operator"},"<<"),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"1")]),s(`
`),n("span",{class:"line"},[s("        x"),n("span",{class:"token punctuation"},","),s(" y "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"for"),s(" num "),n("span",{class:"token keyword"},"in"),s(" nums"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),s(" num "),n("span",{class:"token operator"},"&"),s(" ret"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("                x "),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"="),s(" num")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"else"),n("span",{class:"token punctuation"},":")]),s(`
`),n("span",{class:"line"},[s("                y "),n("span",{class:"token operator"},"^"),n("span",{class:"token operator"},"="),s(" num")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"["),s("x"),n("span",{class:"token punctuation"},","),s(" y"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[8]}),e(o,{title:"go"},{default:l(()=>a[9]||(a[9]=[n("div",{class:"language-go line-numbers-mode","data-highlighter":"prismjs","data-ext":"go","data-title":"go"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"func"),s(),n("span",{class:"token function"},"singleNumbers"),n("span",{class:"token punctuation"},"("),s("nums "),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("	tmp "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token number"},"0")]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token boolean"},"_"),n("span",{class:"token punctuation"},","),s(" num "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token keyword"},"range"),s(" nums "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("		tmp "),n("span",{class:"token operator"},"^="),s(" num")]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("	mask "),n("span",{class:"token operator"},":="),s(" tmp "),n("span",{class:"token operator"},"&"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"-"),s("tmp"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("	ans "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token function"},"make"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token builtin"},"int"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token boolean"},"_"),n("span",{class:"token punctuation"},","),s(" num "),n("span",{class:"token operator"},":="),s(),n("span",{class:"token keyword"},"range"),s(" nums "),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("		"),n("span",{class:"token keyword"},"if"),s(" mask"),n("span",{class:"token operator"},"&"),s("num "),n("span",{class:"token operator"},"=="),s(),n("span",{class:"token number"},"0"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("			ans"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"^="),s(" num")]),s(`
`),n("span",{class:"line"},[s("		"),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("			ans"),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"^="),s(" num")]),s(`
`),n("span",{class:"line"},[s("		"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token keyword"},"return"),s(" ans")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[9]})]),_:1})])}const E=r(k,[["render",y]]),j=JSON.parse('{"path":"/blogs/algorithm/bitwise_operation.html","title":"位运算基本操作与常用技巧","lang":"en-US","frontmatter":{"title":"位运算基本操作与常用技巧","date":"2022-10-24T00:00:00.000Z","tags":["位运算"],"categories":["algorithm"],"sidebar":"auto"},"headers":[{"level":3,"title":"什么是位运算","slug":"什么是位运算","link":"#什么是位运算","children":[]},{"level":3,"title":"前置知识","slug":"前置知识","link":"#前置知识","children":[]},{"level":3,"title":"基本的位运算操作","slug":"基本的位运算操作","link":"#基本的位运算操作","children":[]},{"level":3,"title":"算法常用技巧","slug":"算法常用技巧","link":"#算法常用技巧","children":[]},{"level":3,"title":"技巧活用","slug":"技巧活用","link":"#技巧活用","children":[]}],"git":{"createdTime":1752124578000,"updatedTime":1752124578000,"contributors":[{"name":"户盛年","email":"hushengnian@hushengniandeMacBook-Air.local","commits":1}]},"filePathRelative":"blogs/algorithm/bitwise_operation.md"}');export{E as comp,j as data};
