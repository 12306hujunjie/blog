import{_ as l,c,b as s,a as i,e as a,d as e,w as t,r as o,o as u}from"./app-2O6audqE.js";const k={};function r(d,n){const p=o("RouteLink");return u(),c("div",null,[n[11]||(n[11]=s("h1",{id:"通信与监控系统",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#通信与监控系统"},[s("span",null,"通信与监控系统")])],-1)),s("blockquote",null,[s("p",null,[n[2]||(n[2]=s("strong",null,"系列导航：",-1)),n[3]||(n[3]=a()),e(p,{to:"/blogs/cloud-base/runc-deep-dive/"},{default:t(()=>n[0]||(n[0]=[a("runc 容器运行时深度解析系列")])),_:1,__:[0]}),n[4]||(n[4]=a(" → 第八篇：通信与监控系统")),n[5]||(n[5]=s("br",null,null,-1)),n[6]||(n[6]=s("strong",null,"上一篇：",-1)),n[7]||(n[7]=a()),e(p,{to:"/blogs/cloud-base/runc-deep-dive/07-CRIU%E6%A3%80%E6%9F%A5%E7%82%B9%E4%B8%8E%E6%81%A2%E5%A4%8D.html"},{default:t(()=>n[1]||(n[1]=[a("CRIU检查点与恢复")])),_:1,__:[1]}),n[8]||(n[8]=s("br",null,null,-1)),n[9]||(n[9]=s("strong",null,"最后更新：",-1)),n[10]||(n[10]=a(" 2024"))])]),n[12]||(n[12]=i(`<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>本文深入分析 runc 的通信机制和监控系统，包括进程间通信、事件通知、状态监控等功能。这些机制保障了容器的稳定运行和可管理性。</p><h2 id="概述-1" tabindex="-1"><a class="header-anchor" href="#概述-1"><span>概述</span></a></h2><p>runc的通信与监控系统是容器运行时的核心基础设施，负责进程间通信、事件处理、资源监控和日志管理。这个系统确保了容器生命周期中各个组件之间的协调配合，并提供了完整的可观测性支持。</p><h2 id="_1-通信架构总览" tabindex="-1"><a class="header-anchor" href="#_1-通信架构总览"><span>1. 通信架构总览</span></a></h2><h3 id="_1-1-多层通信模型" tabindex="-1"><a class="header-anchor" href="#_1-1-多层通信模型"><span>1.1 多层通信模型</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">┌─────────────────────────────────────────────────────────────┐</span>
<span class="line">│                     runc通信架构                             │</span>
<span class="line">├─────────────────────────────────────────────────────────────┤</span>
<span class="line">│                                                              │</span>
<span class="line">│  主机进程                     容器进程                        │</span>
<span class="line">│  ┌──────────┐               ┌──────────┐                   │</span>
<span class="line">│  │   runc   │←─────────────→│   init   │                   │</span>
<span class="line">│  │  parent  │  Unix Socket  │  process │                   │</span>
<span class="line">│  └──────────┘               └──────────┘                   │</span>
<span class="line">│       ↓                           ↓                         │</span>
<span class="line">│  ┌──────────┐               ┌──────────┐                   │</span>
<span class="line">│  │  Signal  │←─────────────→│ Container│                   │</span>
<span class="line">│  │ Handler  │    Signals    │ Process  │                   │</span>
<span class="line">│  └──────────┘               └──────────┘                   │</span>
<span class="line">│       ↓                           ↓                         │</span>
<span class="line">│  ┌──────────┐               ┌──────────┐                   │</span>
<span class="line">│  │  Event   │←─────────────→│  Cgroups │                   │</span>
<span class="line">│  │ Monitor  │    Events     │  Events  │                   │</span>
<span class="line">│  └──────────┘               └──────────┘                   │</span>
<span class="line">│                                                              │</span>
<span class="line">│  通信通道:                                                   │</span>
<span class="line">│  • Unix Domain Socket: 进程间控制消息                        │</span>
<span class="line">│  • Sync Socket: 同步协调消息                                │</span>
<span class="line">│  • Log Pipe: 日志转发管道                                   │</span>
<span class="line">│  • Event FD: 事件通知机制                                   │</span>
<span class="line">│  • Notify Socket: systemd集成                               │</span>
<span class="line">│                                                              │</span>
<span class="line">└─────────────────────────────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-核心通信组件" tabindex="-1"><a class="header-anchor" href="#_1-2-核心通信组件"><span>1.2 核心通信组件</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/process_linux.go</span></span>
<span class="line"><span class="token comment">// 进程通信基础设施</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> initProcess <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    cmd             <span class="token operator">*</span>exec<span class="token punctuation">.</span>Cmd</span>
<span class="line">    messageSockPair filePair    <span class="token comment">// 消息通信套接字对</span></span>
<span class="line">    logFilePair     filePair    <span class="token comment">// 日志管道对</span></span>
<span class="line">    syncSocket      <span class="token operator">*</span>syncSocket <span class="token comment">// 同步套接字</span></span>
<span class="line">    container       <span class="token operator">*</span>Container</span>
<span class="line">    fds             <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>    <span class="token comment">// 传递的文件描述符</span></span>
<span class="line">    process         <span class="token operator">*</span>Process</span>
<span class="line">    bootstrapData   io<span class="token punctuation">.</span>Reader   <span class="token comment">// 引导配置数据</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 文件对结构 - 用于进程间通信</span></span>
<span class="line"><span class="token keyword">type</span> filePair <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    parent <span class="token operator">*</span>os<span class="token punctuation">.</span>File  <span class="token comment">// 父进程端</span></span>
<span class="line">    child  <span class="token operator">*</span>os<span class="token punctuation">.</span>File  <span class="token comment">// 子进程端</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建通信通道</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>initProcess<span class="token punctuation">)</span> <span class="token function">createChannels</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 创建消息套接字对</span></span>
<span class="line">    sockPair<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newFilePair</span><span class="token punctuation">(</span><span class="token string">&quot;init-msg&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    p<span class="token punctuation">.</span>messageSockPair <span class="token operator">=</span> sockPair</span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 创建日志管道</span></span>
<span class="line">    logPair<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newFilePair</span><span class="token punctuation">(</span><span class="token string">&quot;log-pipe&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    p<span class="token punctuation">.</span>logFilePair <span class="token operator">=</span> logPair</span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 3. 创建同步套接字</span></span>
<span class="line">    syncPair<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">newSyncSocketPair</span><span class="token punctuation">(</span><span class="token string">&quot;sync&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    p<span class="token punctuation">.</span>syncSocket <span class="token operator">=</span> syncPair<span class="token punctuation">.</span>parent</span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-socket通信机制" tabindex="-1"><a class="header-anchor" href="#_2-socket通信机制"><span>2. Socket通信机制</span></a></h2><h3 id="_2-1-unix-domain-socket实现" tabindex="-1"><a class="header-anchor" href="#_2-1-unix-domain-socket实现"><span>2.1 Unix Domain Socket实现</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// notify_socket.go</span></span>
<span class="line"><span class="token comment">// systemd通知套接字实现</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> notifySocket <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    socket     <span class="token operator">*</span>net<span class="token punctuation">.</span>UnixConn</span>
<span class="line">    host       <span class="token builtin">string</span>       <span class="token comment">// 主机端地址</span></span>
<span class="line">    socketPath <span class="token builtin">string</span>       <span class="token comment">// 套接字文件路径</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建通知套接字</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">newNotifySocket</span><span class="token punctuation">(</span>context <span class="token operator">*</span>cli<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> notifySocketHost <span class="token builtin">string</span><span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>notifySocket <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 生成唯一的套接字路径</span></span>
<span class="line">    notifySocketPath <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token string">&quot;notify.sock&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 创建Unix域套接字</span></span>
<span class="line">    addr <span class="token operator">:=</span> net<span class="token punctuation">.</span>UnixAddr<span class="token punctuation">{</span></span>
<span class="line">        Name<span class="token punctuation">:</span> notifySocketPath<span class="token punctuation">,</span></span>
<span class="line">        Net<span class="token punctuation">:</span>  <span class="token string">&quot;unixgram&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// 使用SOCK_DGRAM类型</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    socket<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">ListenUnixgram</span><span class="token punctuation">(</span><span class="token string">&quot;unixgram&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>addr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>notifySocket<span class="token punctuation">{</span></span>
<span class="line">        socket<span class="token punctuation">:</span>     socket<span class="token punctuation">,</span></span>
<span class="line">        host<span class="token punctuation">:</span>       notifySocketHost<span class="token punctuation">,</span></span>
<span class="line">        socketPath<span class="token punctuation">:</span> notifySocketPath<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 处理systemd通知</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>notifySocket<span class="token punctuation">)</span> <span class="token function">run</span><span class="token punctuation">(</span>pid1 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置环境变量供容器使用</span></span>
<span class="line">    os<span class="token punctuation">.</span><span class="token function">Setenv</span><span class="token punctuation">(</span><span class="token string">&quot;NOTIFY_SOCKET&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>socketPath<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        buffer <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 接收通知消息</span></span>
<span class="line">            num<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> n<span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">ReadFrom</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">break</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 解析sd_notify协议</span></span>
<span class="line">            messages <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>buffer<span class="token punctuation">[</span><span class="token punctuation">:</span>num<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> msg <span class="token operator">:=</span> <span class="token keyword">range</span> messages <span class="token punctuation">{</span></span>
<span class="line">                parts <span class="token operator">:=</span> bytes<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">{</span><span class="token char">&#39;=&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">continue</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                </span>
<span class="line">                <span class="token keyword">switch</span> <span class="token function">string</span><span class="token punctuation">(</span>parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">case</span> <span class="token string">&quot;READY&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// 容器就绪通知</span></span>
<span class="line">                    n<span class="token punctuation">.</span><span class="token function">notifyHost</span><span class="token punctuation">(</span><span class="token string">&quot;READY=1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                    </span>
<span class="line">                <span class="token keyword">case</span> <span class="token string">&quot;RELOADING&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// 容器重载中</span></span>
<span class="line">                    n<span class="token punctuation">.</span><span class="token function">notifyHost</span><span class="token punctuation">(</span><span class="token string">&quot;RELOADING=1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                    </span>
<span class="line">                <span class="token keyword">case</span> <span class="token string">&quot;STOPPING&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// 容器停止中</span></span>
<span class="line">                    n<span class="token punctuation">.</span><span class="token function">notifyHost</span><span class="token punctuation">(</span><span class="token string">&quot;STOPPING=1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">                    </span>
<span class="line">                <span class="token keyword">case</span> <span class="token string">&quot;STATUS&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// 状态更新</span></span>
<span class="line">                    n<span class="token punctuation">.</span><span class="token function">notifyHost</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;STATUS=%s&quot;</span><span class="token punctuation">,</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    </span>
<span class="line">                <span class="token keyword">case</span> <span class="token string">&quot;ERRNO&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// 错误码</span></span>
<span class="line">                    n<span class="token punctuation">.</span><span class="token function">notifyHost</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;ERRNO=%s&quot;</span><span class="token punctuation">,</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    </span>
<span class="line">                <span class="token keyword">case</span> <span class="token string">&quot;MAINPID&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// 主进程PID更新</span></span>
<span class="line">                    n<span class="token punctuation">.</span><span class="token function">notifyHost</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;MAINPID=%d&quot;</span><span class="token punctuation">,</span> pid1<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">                    </span>
<span class="line">                <span class="token keyword">case</span> <span class="token string">&quot;BARRIER&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                    <span class="token comment">// 同步屏障</span></span>
<span class="line">                    n<span class="token punctuation">.</span><span class="token function">handleBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 处理BARRIER同步</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>n <span class="token operator">*</span>notifySocket<span class="token punctuation">)</span> <span class="token function">handleBarrier</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// BARRIER=1实现systemd同步</span></span>
<span class="line">    <span class="token comment">// 等待systemd daemon准备就绪</span></span>
<span class="line">    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">&quot;unixgram&quot;</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>host<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">defer</span> conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 发送BARRIER=1</span></span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">&quot;BARRIER=1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 等待响应确认同步完成</span></span>
<span class="line">    response <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    conn<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-同步套接字实现" tabindex="-1"><a class="header-anchor" href="#_2-2-同步套接字实现"><span>2.2 同步套接字实现</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/sync_unix.go</span></span>
<span class="line"><span class="token comment">// 可靠的同步通信机制</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> syncSocket <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    f      <span class="token operator">*</span>os<span class="token punctuation">.</span>File</span>
<span class="line">    closed atomic<span class="token punctuation">.</span>Bool</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建同步套接字对</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">newSyncSocketPair</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>syncSocket<span class="token punctuation">,</span> <span class="token operator">*</span>syncSocket<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用SOCK_SEQPACKET确保消息边界和顺序</span></span>
<span class="line">    fds<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Socketpair</span><span class="token punctuation">(</span>unix<span class="token punctuation">.</span>AF_UNIX<span class="token punctuation">,</span> unix<span class="token punctuation">.</span>SOCK_SEQPACKET<span class="token operator">|</span>unix<span class="token punctuation">.</span>SOCK_CLOEXEC<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    parent <span class="token operator">:=</span> <span class="token operator">&amp;</span>syncSocket<span class="token punctuation">{</span></span>
<span class="line">        f<span class="token punctuation">:</span> os<span class="token punctuation">.</span><span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>fds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">+</span><span class="token string">&quot;-parent&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    child <span class="token operator">:=</span> <span class="token operator">&amp;</span>syncSocket<span class="token punctuation">{</span></span>
<span class="line">        f<span class="token punctuation">:</span> os<span class="token punctuation">.</span><span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>fds<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">+</span><span class="token string">&quot;-child&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> parent<span class="token punctuation">,</span> child<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 发送同步消息</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>syncSocket<span class="token punctuation">)</span> <span class="token function">SendMessage</span><span class="token punctuation">(</span>msg syncMessage<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 原子性发送整个消息</span></span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> s<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 接收同步消息</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>syncSocket<span class="token punctuation">)</span> <span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>syncMessage<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// SOCK_SEQPACKET保证读取完整消息</span></span>
<span class="line">    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">4096</span><span class="token punctuation">)</span></span>
<span class="line">    n<span class="token punctuation">,</span> err <span class="token operator">:=</span> s<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">var</span> msg syncMessage</span>
<span class="line">    err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 传递文件描述符</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>syncSocket<span class="token punctuation">)</span> <span class="token function">SendFd</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> fd <span class="token builtin">uintptr</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 使用SCM_RIGHTS通过套接字传递文件描述符</span></span>
<span class="line">    oob <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">UnixRights</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    data <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">SendmsgN</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token function">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        data<span class="token punctuation">,</span></span>
<span class="line">        oob<span class="token punctuation">,</span></span>
<span class="line">        <span class="token boolean">nil</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 接收文件描述符</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>syncSocket<span class="token punctuation">)</span> <span class="token function">RecvFd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span></span>
<span class="line">    oob <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    n<span class="token punctuation">,</span> oobn<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">RecvmsgN</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token function">int</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>f<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        buf<span class="token punctuation">,</span></span>
<span class="line">        oob<span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 解析SCM_RIGHTS消息</span></span>
<span class="line">    scms<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">ParseSocketControlMessage</span><span class="token punctuation">(</span>oob<span class="token punctuation">[</span><span class="token punctuation">:</span>oobn<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    fds<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">ParseUnixRights</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>scms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    name <span class="token operator">:=</span> <span class="token function">string</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> os<span class="token punctuation">.</span><span class="token function">NewFile</span><span class="token punctuation">(</span><span class="token function">uintptr</span><span class="token punctuation">(</span>fds<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-事件系统实现" tabindex="-1"><a class="header-anchor" href="#_3-事件系统实现"><span>3. 事件系统实现</span></a></h2><h3 id="_3-1-事件类型定义" tabindex="-1"><a class="header-anchor" href="#_3-1-事件类型定义"><span>3.1 事件类型定义</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// types/events.go</span></span>
<span class="line"><span class="token comment">// 容器事件结构</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> Event <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Type <span class="token builtin">string</span> <span class="token string">\`json:&quot;type&quot;\`</span></span>
<span class="line">    ID   <span class="token builtin">string</span> <span class="token string">\`json:&quot;id&quot;\`</span></span>
<span class="line">    Data any    <span class="token string">\`json:&quot;data,omitempty&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 统计事件数据</span></span>
<span class="line"><span class="token keyword">type</span> Stats <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    CPU        CPU                <span class="token string">\`json:&quot;cpu&quot;\`</span></span>
<span class="line">    CPUs       <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>CPU     <span class="token string">\`json:&quot;cpus,omitempty&quot;\`</span></span>
<span class="line">    Memory     Memory             <span class="token string">\`json:&quot;memory&quot;\`</span></span>
<span class="line">    Pids       Pids               <span class="token string">\`json:&quot;pids&quot;\`</span></span>
<span class="line">    Blkio      Blkio              <span class="token string">\`json:&quot;blkio&quot;\`</span></span>
<span class="line">    Hugetlb    <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>Hugetlb <span class="token string">\`json:&quot;hugetlb,omitempty&quot;\`</span></span>
<span class="line">    IntelRdt   IntelRdt           <span class="token string">\`json:&quot;intel_rdt,omitempty&quot;\`</span></span>
<span class="line">    NetworkInterfaces <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>NetworkInterface <span class="token string">\`json:&quot;network_interfaces,omitempty&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// OOM事件</span></span>
<span class="line"><span class="token keyword">type</span> OOMEvent <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    ContainerID <span class="token builtin">string</span>    <span class="token string">\`json:&quot;container_id&quot;\`</span></span>
<span class="line">    Timestamp   time<span class="token punctuation">.</span>Time <span class="token string">\`json:&quot;timestamp&quot;\`</span></span>
<span class="line">    Process     <span class="token builtin">string</span>    <span class="token string">\`json:&quot;process&quot;\`</span></span>
<span class="line">    PID         <span class="token builtin">int</span>       <span class="token string">\`json:&quot;pid&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2-oom监控实现" tabindex="-1"><a class="header-anchor" href="#_3-2-oom监控实现"><span>3.2 OOM监控实现</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/notify_linux.go (cgroups v1)</span></span>
<span class="line"><span class="token comment">// 内存压力和OOM事件监控</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">registerMemoryEvent</span><span class="token punctuation">(</span>dir <span class="token builtin">string</span><span class="token punctuation">,</span> eventName <span class="token builtin">string</span><span class="token punctuation">,</span> arg <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建eventfd用于事件通知</span></span>
<span class="line">    eventfd<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Eventfd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> unix<span class="token punctuation">.</span>EFD_CLOEXEC<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 打开cgroup事件控制文件</span></span>
<span class="line">    evtFile<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> eventName<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        unix<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>eventfd<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">defer</span> evtFile<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 注册事件监控</span></span>
<span class="line">    eventControl<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">OpenFile</span><span class="token punctuation">(</span></span>
<span class="line">        filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> <span class="token string">&quot;cgroup.event_control&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        os<span class="token punctuation">.</span>O_WRONLY<span class="token punctuation">,</span></span>
<span class="line">        <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        unix<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>eventfd<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">defer</span> eventControl<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 写入格式: &lt;eventfd&gt; &lt;target_fd&gt; &lt;args&gt;</span></span>
<span class="line">    data <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%d %d %s&quot;</span><span class="token punctuation">,</span> eventfd<span class="token punctuation">,</span> evtFile<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> eventControl<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        unix<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>eventfd<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 创建通知通道</span></span>
<span class="line">    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 启动事件监听goroutine</span></span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">defer</span> unix<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>eventfd<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 阻塞等待事件</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>eventfd<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 发送事件通知</span></span>
<span class="line">            <span class="token keyword">select</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token comment">// 防止阻塞</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> ch<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// libcontainer/notify_v2_linux.go (cgroups v2)</span></span>
<span class="line"><span class="token comment">// 使用inotify监控memory.events</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">notifyOnOOMV2</span><span class="token punctuation">(</span>path <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">&lt;-</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建inotify实例</span></span>
<span class="line">    inotifyFd<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">InotifyInit1</span><span class="token punctuation">(</span>unix<span class="token punctuation">.</span>IN_CLOEXEC<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 监控memory.events文件</span></span>
<span class="line">    eventsFile <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">&quot;memory.events&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    wd<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">InotifyAddWatch</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> eventsFile<span class="token punctuation">,</span> unix<span class="token punctuation">.</span>IN_MODIFY<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        unix<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">defer</span> unix<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        buf <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span></span>
<span class="line">        lastOOMKill <span class="token operator">:=</span> <span class="token function">uint64</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 等待inotify事件</span></span>
<span class="line">            n<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>inotifyFd<span class="token punctuation">,</span> buf<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 解析inotify事件</span></span>
<span class="line">            <span class="token keyword">if</span> n <span class="token operator">&lt;</span> unix<span class="token punctuation">.</span>SizeofInotifyEvent <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">continue</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 读取memory.events内容</span></span>
<span class="line">            data<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>eventsFile<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">continue</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 解析oom_kill计数</span></span>
<span class="line">            lines <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> line <span class="token operator">:=</span> <span class="token keyword">range</span> lines <span class="token punctuation">{</span></span>
<span class="line">                fields <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Fields</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>fields<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;oom_kill&quot;</span> <span class="token punctuation">{</span></span>
<span class="line">                    count<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">ParseUint</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">if</span> count <span class="token operator">&gt;</span> lastOOMKill <span class="token punctuation">{</span></span>
<span class="line">                        lastOOMKill <span class="token operator">=</span> count</span>
<span class="line">                        ch <span class="token operator">&lt;-</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">                    <span class="token punctuation">}</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> ch<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-日志系统" tabindex="-1"><a class="header-anchor" href="#_4-日志系统"><span>4. 日志系统</span></a></h2><h3 id="_4-1-日志转发机制" tabindex="-1"><a class="header-anchor" href="#_4-1-日志转发机制"><span>4.1 日志转发机制</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/logs/logs.go</span></span>
<span class="line"><span class="token comment">// 容器日志转发系统</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 日志消息格式</span></span>
<span class="line"><span class="token keyword">type</span> LogEntry <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Level   <span class="token builtin">string</span>    <span class="token string">\`json:&quot;level&quot;\`</span></span>
<span class="line">    Msg     <span class="token builtin">string</span>    <span class="token string">\`json:&quot;msg&quot;\`</span></span>
<span class="line">    Time    time<span class="token punctuation">.</span>Time <span class="token string">\`json:&quot;time&quot;\`</span></span>
<span class="line">    Source  <span class="token builtin">string</span>    <span class="token string">\`json:&quot;source,omitempty&quot;\`</span></span>
<span class="line">    Process <span class="token builtin">string</span>    <span class="token string">\`json:&quot;process,omitempty&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 转发容器日志</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">ForwardLogs</span><span class="token punctuation">(</span>logPipe io<span class="token punctuation">.</span>ReadCloser<span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">defer</span> <span class="token function">close</span><span class="token punctuation">(</span>done<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">defer</span> logPipe<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>logPipe<span class="token punctuation">)</span></span>
<span class="line">        scanner<span class="token punctuation">.</span><span class="token function">Buffer</span><span class="token punctuation">(</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bufio<span class="token punctuation">.</span>MaxScanTokenSize<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            line <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 解析JSON格式的日志</span></span>
<span class="line">            <span class="token keyword">var</span> entry LogEntry</span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> <span class="token operator">&amp;</span>entry<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 非JSON格式，直接输出</span></span>
<span class="line">                fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">&quot;%s\\n&quot;</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">continue</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 转换为logrus日志</span></span>
<span class="line">            logger <span class="token operator">:=</span> logrus<span class="token punctuation">.</span><span class="token function">WithFields</span><span class="token punctuation">(</span>logrus<span class="token punctuation">.</span>Fields<span class="token punctuation">{</span></span>
<span class="line">                <span class="token string">&quot;source&quot;</span><span class="token punctuation">:</span>  entry<span class="token punctuation">.</span>Source<span class="token punctuation">,</span></span>
<span class="line">                <span class="token string">&quot;process&quot;</span><span class="token punctuation">:</span> entry<span class="token punctuation">.</span>Process<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token keyword">switch</span> entry<span class="token punctuation">.</span>Level <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                logger<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>Msg<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;warning&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                logger<span class="token punctuation">.</span><span class="token function">Warning</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>Msg<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;info&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>Msg<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">case</span> <span class="token string">&quot;debug&quot;</span><span class="token punctuation">:</span></span>
<span class="line">                logger<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>Msg<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">                logger<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span>Msg<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            done <span class="token operator">&lt;-</span> err</span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> done</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 配置日志管道</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">ConfigureLogging</span><span class="token punctuation">(</span>config LogConfig<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建日志管道</span></span>
<span class="line">    logR<span class="token punctuation">,</span> logW<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Pipe</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设置日志格式</span></span>
<span class="line">    formatter <span class="token operator">:=</span> <span class="token operator">&amp;</span>logrus<span class="token punctuation">.</span>JSONFormatter<span class="token punctuation">{</span></span>
<span class="line">        TimestampFormat<span class="token punctuation">:</span> time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 配置日志级别</span></span>
<span class="line">    level<span class="token punctuation">,</span> err <span class="token operator">:=</span> logrus<span class="token punctuation">.</span><span class="token function">ParseLevel</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>LogLevel<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        level <span class="token operator">=</span> logrus<span class="token punctuation">.</span>InfoLevel</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    logrus<span class="token punctuation">.</span><span class="token function">SetLevel</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span></span>
<span class="line">    logrus<span class="token punctuation">.</span><span class="token function">SetFormatter</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 启动日志转发</span></span>
<span class="line">    <span class="token function">ForwardLogs</span><span class="token punctuation">(</span>logR<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> logW<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-调试日志系统" tabindex="-1"><a class="header-anchor" href="#_4-2-调试日志系统"><span>4.2 调试日志系统</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 调试日志实现</span></span>
<span class="line"><span class="token keyword">type</span> DebugLogger <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    enabled <span class="token builtin">bool</span></span>
<span class="line">    file    <span class="token operator">*</span>os<span class="token punctuation">.</span>File</span>
<span class="line">    mu      sync<span class="token punctuation">.</span>Mutex</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>d <span class="token operator">*</span>DebugLogger<span class="token punctuation">)</span> <span class="token function">Debugf</span><span class="token punctuation">(</span>format <span class="token builtin">string</span><span class="token punctuation">,</span> args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token operator">!</span>d<span class="token punctuation">.</span>enabled <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> d<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    timestamp <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339Nano<span class="token punctuation">)</span></span>
<span class="line">    msg <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> args<span class="token operator">...</span><span class="token punctuation">)</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>d<span class="token punctuation">.</span>file<span class="token punctuation">,</span> <span class="token string">&quot;[%s] DEBUG: %s\\n&quot;</span><span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 跟踪关键操作</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">traceOperation</span><span class="token punctuation">(</span>op <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    debug<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Starting operation: %s&quot;</span><span class="token punctuation">,</span> op<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    err <span class="token operator">:=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    duration <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        debug<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Operation %s failed after %v: %v&quot;</span><span class="token punctuation">,</span> op<span class="token punctuation">,</span> duration<span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        debug<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Operation %s completed in %v&quot;</span><span class="token punctuation">,</span> op<span class="token punctuation">,</span> duration<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> err</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-监控指标收集" tabindex="-1"><a class="header-anchor" href="#_5-监控指标收集"><span>5. 监控指标收集</span></a></h2><h3 id="_5-1-cpu指标" tabindex="-1"><a class="header-anchor" href="#_5-1-cpu指标"><span>5.1 CPU指标</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// CPU使用统计</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">collectCPUStats</span><span class="token punctuation">(</span>cg cgroups<span class="token punctuation">.</span>Cgroup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>CPU<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    stats<span class="token punctuation">,</span> err <span class="token operator">:=</span> cg<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    cpu <span class="token operator">:=</span> <span class="token operator">&amp;</span>CPU<span class="token punctuation">{</span></span>
<span class="line">        Usage<span class="token punctuation">:</span> CPUUsage<span class="token punctuation">{</span></span>
<span class="line">            Total<span class="token punctuation">:</span>  stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>Total<span class="token punctuation">,</span></span>
<span class="line">            Kernel<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>Kernel<span class="token punctuation">,</span></span>
<span class="line">            User<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>User<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        Throttling<span class="token punctuation">:</span> Throttling<span class="token punctuation">{</span></span>
<span class="line">            Periods<span class="token punctuation">:</span>          stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Throttling<span class="token punctuation">.</span>Periods<span class="token punctuation">,</span></span>
<span class="line">            ThrottledPeriods<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Throttling<span class="token punctuation">.</span>ThrottledPeriods<span class="token punctuation">,</span></span>
<span class="line">            ThrottledTime<span class="token punctuation">:</span>    stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Throttling<span class="token punctuation">.</span>ThrottledTime<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 收集per-CPU统计</span></span>
<span class="line">    <span class="token keyword">if</span> stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>PerCPU <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        cpu<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>PerCPU <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">uint64</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>PerCPU<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token function">copy</span><span class="token punctuation">(</span>cpu<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>PerCPU<span class="token punctuation">,</span> stats<span class="token punctuation">.</span>CPU<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>PerCPU<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> cpu<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-内存指标" tabindex="-1"><a class="header-anchor" href="#_5-2-内存指标"><span>5.2 内存指标</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 内存使用统计</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">collectMemoryStats</span><span class="token punctuation">(</span>cg cgroups<span class="token punctuation">.</span>Cgroup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Memory<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    stats<span class="token punctuation">,</span> err <span class="token operator">:=</span> cg<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    memory <span class="token operator">:=</span> <span class="token operator">&amp;</span>Memory<span class="token punctuation">{</span></span>
<span class="line">        Cache<span class="token punctuation">:</span>        stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Cache<span class="token punctuation">,</span></span>
<span class="line">        Usage<span class="token punctuation">:</span>        MemoryEntry<span class="token punctuation">{</span></span>
<span class="line">            Limit<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>Limit<span class="token punctuation">,</span></span>
<span class="line">            Usage<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>Usage<span class="token punctuation">,</span></span>
<span class="line">            MaxUsage<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>Max<span class="token punctuation">,</span></span>
<span class="line">            Failcnt<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Usage<span class="token punctuation">.</span>Failcnt<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        Swap<span class="token punctuation">:</span>         MemoryEntry<span class="token punctuation">{</span></span>
<span class="line">            Limit<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Swap<span class="token punctuation">.</span>Limit<span class="token punctuation">,</span></span>
<span class="line">            Usage<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Swap<span class="token punctuation">.</span>Usage<span class="token punctuation">,</span></span>
<span class="line">            MaxUsage<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Swap<span class="token punctuation">.</span>Max<span class="token punctuation">,</span></span>
<span class="line">            Failcnt<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Swap<span class="token punctuation">.</span>Failcnt<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        Kernel<span class="token punctuation">:</span>       MemoryEntry<span class="token punctuation">{</span></span>
<span class="line">            Limit<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Kernel<span class="token punctuation">.</span>Limit<span class="token punctuation">,</span></span>
<span class="line">            Usage<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Kernel<span class="token punctuation">.</span>Usage<span class="token punctuation">,</span></span>
<span class="line">            MaxUsage<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Kernel<span class="token punctuation">.</span>Max<span class="token punctuation">,</span></span>
<span class="line">            Failcnt<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Kernel<span class="token punctuation">.</span>Failcnt<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        KernelTCP<span class="token punctuation">:</span>    MemoryEntry<span class="token punctuation">{</span></span>
<span class="line">            Limit<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>KernelTCP<span class="token punctuation">.</span>Limit<span class="token punctuation">,</span></span>
<span class="line">            Usage<span class="token punctuation">:</span>   stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>KernelTCP<span class="token punctuation">.</span>Usage<span class="token punctuation">,</span></span>
<span class="line">            MaxUsage<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>KernelTCP<span class="token punctuation">.</span>Max<span class="token punctuation">,</span></span>
<span class="line">            Failcnt<span class="token punctuation">:</span> stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>KernelTCP<span class="token punctuation">.</span>Failcnt<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        Raw<span class="token punctuation">:</span>          stats<span class="token punctuation">.</span>Memory<span class="token punctuation">.</span>Raw<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> memory<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-i-o指标" tabindex="-1"><a class="header-anchor" href="#_5-3-i-o指标"><span>5.3 I/O指标</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 块设备I/O统计</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">collectBlkioStats</span><span class="token punctuation">(</span>cg cgroups<span class="token punctuation">.</span>Cgroup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>Blkio<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    stats<span class="token punctuation">,</span> err <span class="token operator">:=</span> cg<span class="token punctuation">.</span><span class="token function">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    blkio <span class="token operator">:=</span> <span class="token operator">&amp;</span>Blkio<span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 转换I/O服务字节数</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> entry <span class="token operator">:=</span> <span class="token keyword">range</span> stats<span class="token punctuation">.</span>Blkio<span class="token punctuation">.</span>IoServiceBytesRecursive <span class="token punctuation">{</span></span>
<span class="line">        blkio<span class="token punctuation">.</span>IoServiceBytesRecursive <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span></span>
<span class="line">            blkio<span class="token punctuation">.</span>IoServiceBytesRecursive<span class="token punctuation">,</span></span>
<span class="line">            BlkioEntry<span class="token punctuation">{</span></span>
<span class="line">                Major<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>Major<span class="token punctuation">,</span></span>
<span class="line">                Minor<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>Minor<span class="token punctuation">,</span></span>
<span class="line">                Op<span class="token punctuation">:</span>    entry<span class="token punctuation">.</span>Op<span class="token punctuation">,</span></span>
<span class="line">                Value<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>Value<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 转换I/O服务操作数</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> entry <span class="token operator">:=</span> <span class="token keyword">range</span> stats<span class="token punctuation">.</span>Blkio<span class="token punctuation">.</span>IoServicedRecursive <span class="token punctuation">{</span></span>
<span class="line">        blkio<span class="token punctuation">.</span>IoServicedRecursive <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span></span>
<span class="line">            blkio<span class="token punctuation">.</span>IoServicedRecursive<span class="token punctuation">,</span></span>
<span class="line">            BlkioEntry<span class="token punctuation">{</span></span>
<span class="line">                Major<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>Major<span class="token punctuation">,</span></span>
<span class="line">                Minor<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>Minor<span class="token punctuation">,</span></span>
<span class="line">                Op<span class="token punctuation">:</span>    entry<span class="token punctuation">.</span>Op<span class="token punctuation">,</span></span>
<span class="line">                Value<span class="token punctuation">:</span> entry<span class="token punctuation">.</span>Value<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> blkio<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6-终端处理" tabindex="-1"><a class="header-anchor" href="#_6-终端处理"><span>6. 终端处理</span></a></h2><h3 id="_6-1-tty管理" tabindex="-1"><a class="header-anchor" href="#_6-1-tty管理"><span>6.1 TTY管理</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// tty.go</span></span>
<span class="line"><span class="token comment">// 终端多路复用实现</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> tty <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    epoller     <span class="token operator">*</span>console<span class="token punctuation">.</span>Epoller</span>
<span class="line">    console     <span class="token operator">*</span>console<span class="token punctuation">.</span>EpollConsole  <span class="token comment">// 容器端控制台</span></span>
<span class="line">    hostConsole console<span class="token punctuation">.</span>Console         <span class="token comment">// 主机端控制台</span></span>
<span class="line">    closers     <span class="token punctuation">[</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>Closer</span>
<span class="line">    postStart   <span class="token punctuation">[</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>Closer</span>
<span class="line">    wg          sync<span class="token punctuation">.</span>WaitGroup</span>
<span class="line">    consoleC    <span class="token keyword">chan</span> <span class="token builtin">error</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置TTY</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">setupTty</span><span class="token punctuation">(</span>process <span class="token operator">*</span>libcontainer<span class="token punctuation">.</span>Process<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>tty<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建控制台</span></span>
<span class="line">    cons<span class="token punctuation">,</span> err <span class="token operator">:=</span> console<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设置为原始模式</span></span>
<span class="line">    state<span class="token punctuation">,</span> err <span class="token operator">:=</span> console<span class="token punctuation">.</span><span class="token function">MakeRaw</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 创建epoll实例用于I/O多路复用</span></span>
<span class="line">    epoller<span class="token punctuation">,</span> err <span class="token operator">:=</span> console<span class="token punctuation">.</span><span class="token function">NewEpoller</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 创建容器端控制台</span></span>
<span class="line">    epollConsole<span class="token punctuation">,</span> err <span class="token operator">:=</span> epoller<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>cons<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    t <span class="token operator">:=</span> <span class="token operator">&amp;</span>tty<span class="token punctuation">{</span></span>
<span class="line">        epoller<span class="token punctuation">:</span>     epoller<span class="token punctuation">,</span></span>
<span class="line">        console<span class="token punctuation">:</span>     epollConsole<span class="token punctuation">,</span></span>
<span class="line">        hostConsole<span class="token punctuation">:</span> cons<span class="token punctuation">,</span></span>
<span class="line">        consoleC<span class="token punctuation">:</span>    <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 启动I/O复制</span></span>
<span class="line">    <span class="token keyword">go</span> t<span class="token punctuation">.</span><span class="token function">copyIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 处理窗口大小变化</span></span>
<span class="line">    <span class="token keyword">go</span> t<span class="token punctuation">.</span><span class="token function">handleResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> t<span class="token punctuation">,</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// I/O复制</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>tty<span class="token punctuation">)</span> <span class="token function">copyIO</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    t<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> t<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 从容器控制台读取并写入主机</span></span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> t<span class="token punctuation">.</span>console<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 从主机读取并写入容器控制台</span></span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>console<span class="token punctuation">,</span> os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 等待epoll事件</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">        events<span class="token punctuation">,</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span>epoller<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            t<span class="token punctuation">.</span>consoleC <span class="token operator">&lt;-</span> err</span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> event <span class="token operator">:=</span> <span class="token keyword">range</span> events <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> event<span class="token punctuation">.</span>Fd <span class="token operator">==</span> t<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 处理容器控制台事件</span></span>
<span class="line">                <span class="token keyword">if</span> event<span class="token punctuation">.</span>Events<span class="token operator">&amp;</span>unix<span class="token punctuation">.</span>EPOLLIN <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 有数据可读</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                <span class="token keyword">if</span> event<span class="token punctuation">.</span>Events<span class="token operator">&amp;</span>unix<span class="token punctuation">.</span>EPOLLHUP <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token comment">// 连接关闭</span></span>
<span class="line">                    <span class="token keyword">return</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 处理终端大小调整</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>tty<span class="token punctuation">)</span> <span class="token function">handleResize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sigc <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>sigc<span class="token punctuation">,</span> unix<span class="token punctuation">.</span>SIGWINCH<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token keyword">range</span> sigc <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 获取新的终端大小</span></span>
<span class="line">        size<span class="token punctuation">,</span> err <span class="token operator">:=</span> console<span class="token punctuation">.</span><span class="token function">GetWinsize</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>hostConsole<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">continue</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 设置容器控制台大小</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">:=</span> console<span class="token punctuation">.</span><span class="token function">SetWinsize</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>console<span class="token punctuation">.</span><span class="token function">Fd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            logrus<span class="token punctuation">.</span><span class="token function">WithError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;failed to resize console&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_7-信号处理" tabindex="-1"><a class="header-anchor" href="#_7-信号处理"><span>7. 信号处理</span></a></h2><h3 id="_7-1-信号转发" tabindex="-1"><a class="header-anchor" href="#_7-1-信号转发"><span>7.1 信号转发</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// signals.go</span></span>
<span class="line"><span class="token comment">// 信号处理和转发</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> signalHandler <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    signals      <span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal</span>
<span class="line">    notifySocket <span class="token operator">*</span>notifySocket</span>
<span class="line">    container    libcontainer<span class="token punctuation">.</span>Container</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建信号处理器</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">newSignalHandler</span><span class="token punctuation">(</span>notifySocket <span class="token operator">*</span>notifySocket<span class="token punctuation">,</span> container libcontainer<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token operator">*</span>signalHandler <span class="token punctuation">{</span></span>
<span class="line">    signals <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token comment">// 缓冲防止信号丢失</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 注册所有信号</span></span>
<span class="line">    signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>signals<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>signalHandler<span class="token punctuation">{</span></span>
<span class="line">        signals<span class="token punctuation">:</span>      signals<span class="token punctuation">,</span></span>
<span class="line">        notifySocket<span class="token punctuation">:</span> notifySocket<span class="token punctuation">,</span></span>
<span class="line">        container<span class="token punctuation">:</span>    container<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 信号转发循环</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>signalHandler<span class="token punctuation">)</span> <span class="token function">forward</span><span class="token punctuation">(</span>process <span class="token operator">*</span>libcontainer<span class="token punctuation">.</span>Process<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> sig <span class="token operator">:=</span> <span class="token keyword">range</span> h<span class="token punctuation">.</span>signals <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span> sig <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> unix<span class="token punctuation">.</span>SIGWINCH<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// 终端大小变化，单独处理</span></span>
<span class="line">            <span class="token comment">// 已在TTY处理器中处理</span></span>
<span class="line">            </span>
<span class="line">        <span class="token keyword">case</span> unix<span class="token punctuation">.</span>SIGCHLD<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// 子进程退出，收割僵尸进程</span></span>
<span class="line">            <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">var</span> status unix<span class="token punctuation">.</span>WaitStatus</span>
<span class="line">                pid<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Wait4</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> unix<span class="token punctuation">.</span>WNOHANG<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">||</span> pid <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">break</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                </span>
<span class="line">                <span class="token comment">// 记录子进程退出状态</span></span>
<span class="line">                logrus<span class="token punctuation">.</span><span class="token function">WithFields</span><span class="token punctuation">(</span>logrus<span class="token punctuation">.</span>Fields<span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string">&quot;pid&quot;</span><span class="token punctuation">:</span>    pid<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string">&quot;status&quot;</span><span class="token punctuation">:</span> status<span class="token punctuation">.</span><span class="token function">ExitStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;child process exited&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">        <span class="token keyword">case</span> unix<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">,</span> unix<span class="token punctuation">.</span>SIGINT<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// 优雅终止信号</span></span>
<span class="line">            logrus<span class="token punctuation">.</span><span class="token function">Info</span><span class="token punctuation">(</span><span class="token string">&quot;received termination signal&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 通知systemd</span></span>
<span class="line">            <span class="token keyword">if</span> h<span class="token punctuation">.</span>notifySocket <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                h<span class="token punctuation">.</span>notifySocket<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">&quot;STOPPING=1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 转发给容器</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">:=</span> process<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                logrus<span class="token punctuation">.</span><span class="token function">WithError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;failed to forward signal&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">        <span class="token keyword">case</span> unix<span class="token punctuation">.</span>SIGKILL<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// 强制终止，不能被捕获，直接退出</span></span>
<span class="line">            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">137</span><span class="token punctuation">)</span> <span class="token comment">// 128 + 9</span></span>
<span class="line">            </span>
<span class="line">        <span class="token keyword">case</span> unix<span class="token punctuation">.</span>SIGPIPE<span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// 忽略管道破裂信号</span></span>
<span class="line">            </span>
<span class="line">        <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">            <span class="token comment">// 转发其他信号给容器进程</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">:=</span> process<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                logrus<span class="token punctuation">.</span><span class="token function">WithError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WithField</span><span class="token punctuation">(</span><span class="token string">&quot;signal&quot;</span><span class="token punctuation">,</span> sig<span class="token punctuation">)</span><span class="token punctuation">.</span></span>
<span class="line">                    <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&quot;failed to forward signal&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 设置子进程收割器</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">setupSubreaper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 设置为子进程收割器，收养孤儿进程</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Prctl</span><span class="token punctuation">(</span>unix<span class="token punctuation">.</span>PR_SET_CHILD_SUBREAPER<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 注册SIGCHLD处理</span></span>
<span class="line">    sigc <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>sigc<span class="token punctuation">,</span> unix<span class="token punctuation">.</span>SIGCHLD<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token keyword">range</span> sigc <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">reapChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> <span class="token boolean">nil</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 收割僵尸进程</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">reapChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">var</span> status unix<span class="token punctuation">.</span>WaitStatus</span>
<span class="line">        pid<span class="token punctuation">,</span> err <span class="token operator">:=</span> unix<span class="token punctuation">.</span><span class="token function">Wait4</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> unix<span class="token punctuation">.</span>WNOHANG<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">!=</span> unix<span class="token punctuation">.</span>EINTR <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">break</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">continue</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> pid <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">break</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 记录进程退出信息</span></span>
<span class="line">        logrus<span class="token punctuation">.</span><span class="token function">WithFields</span><span class="token punctuation">(</span>logrus<span class="token punctuation">.</span>Fields<span class="token punctuation">{</span></span>
<span class="line">            <span class="token string">&quot;pid&quot;</span><span class="token punctuation">:</span> pid<span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;exit_code&quot;</span><span class="token punctuation">:</span> status<span class="token punctuation">.</span><span class="token function">ExitStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token string">&quot;signal&quot;</span><span class="token punctuation">:</span> status<span class="token punctuation">.</span><span class="token function">Signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;reaped child process&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-进程间同步" tabindex="-1"><a class="header-anchor" href="#_8-进程间同步"><span>8. 进程间同步</span></a></h2><h3 id="_8-1-同步消息协议" tabindex="-1"><a class="header-anchor" href="#_8-1-同步消息协议"><span>8.1 同步消息协议</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// libcontainer/sync.go</span></span>
<span class="line"><span class="token comment">// 进程同步消息定义</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> syncType <span class="token builtin">string</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">(</span></span>
<span class="line">    procReady       syncType <span class="token operator">=</span> <span class="token string">&quot;procReady&quot;</span>       <span class="token comment">// 进程准备就绪</span></span>
<span class="line">    procRun         syncType <span class="token operator">=</span> <span class="token string">&quot;procRun&quot;</span>         <span class="token comment">// 开始运行</span></span>
<span class="line">    procHooks       syncType <span class="token operator">=</span> <span class="token string">&quot;procHooks&quot;</span>       <span class="token comment">// 执行钩子</span></span>
<span class="line">    procResume      syncType <span class="token operator">=</span> <span class="token string">&quot;procResume&quot;</span>      <span class="token comment">// 恢复执行</span></span>
<span class="line">    procSeccomp     syncType <span class="token operator">=</span> <span class="token string">&quot;procSeccomp&quot;</span>     <span class="token comment">// 设置seccomp</span></span>
<span class="line">    procMountPlease syncType <span class="token operator">=</span> <span class="token string">&quot;procMountPlease&quot;</span> <span class="token comment">// 请求挂载</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> syncMessage <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    Type syncType     <span class="token string">\`json:&quot;type&quot;\`</span></span>
<span class="line">    Fd   <span class="token operator">*</span><span class="token builtin">int</span>        <span class="token string">\`json:&quot;fd,omitempty&quot;\`</span></span>
<span class="line">    Data <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token string">\`json:&quot;data,omitempty&quot;\`</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 父子进程同步流程</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">parentChildSync</span><span class="token punctuation">(</span>parent <span class="token operator">*</span>syncSocket<span class="token punctuation">,</span> child <span class="token operator">*</span>syncSocket<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1. 等待子进程准备就绪</span></span>
<span class="line">    msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> msg<span class="token punctuation">.</span>Type <span class="token operator">!=</span> procReady <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">&quot;unexpected message: %v&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>Type<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 2. 发送配置数据</span></span>
<span class="line">    config <span class="token operator">:=</span> syncMessage<span class="token punctuation">{</span></span>
<span class="line">        Type<span class="token punctuation">:</span> procRun<span class="token punctuation">,</span></span>
<span class="line">        Data<span class="token punctuation">:</span> containerConfig<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">:=</span> parent<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 3. 等待初始化完成</span></span>
<span class="line">    msg<span class="token punctuation">,</span> err <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> msg<span class="token punctuation">.</span>Type <span class="token operator">==</span> procMountPlease <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 子进程请求特权挂载操作</span></span>
<span class="line">        <span class="token function">performPrivilegedMount</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Data<span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 发送完成确认</span></span>
<span class="line">        reply <span class="token operator">:=</span> syncMessage<span class="token punctuation">{</span>Type<span class="token punctuation">:</span> procResume<span class="token punctuation">}</span></span>
<span class="line">        parent<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>reply<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 4. 等待seccomp设置</span></span>
<span class="line">    msg<span class="token punctuation">,</span> err <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> err</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">if</span> msg<span class="token punctuation">.</span>Type <span class="token operator">==</span> procSeccomp <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 传递seccomp配置文件描述符</span></span>
<span class="line">        <span class="token keyword">if</span> msg<span class="token punctuation">.</span>Fd <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">            parent<span class="token punctuation">.</span><span class="token function">SendFd</span><span class="token punctuation">(</span><span class="token string">&quot;seccomp&quot;</span><span class="token punctuation">,</span> <span class="token function">uintptr</span><span class="token punctuation">(</span><span class="token operator">*</span>msg<span class="token punctuation">.</span>Fd<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 5. 通知执行用户进程</span></span>
<span class="line">    final <span class="token operator">:=</span> syncMessage<span class="token punctuation">{</span>Type<span class="token punctuation">:</span> procRun<span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> parent<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span>final<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-实践练习" tabindex="-1"><a class="header-anchor" href="#_9-实践练习"><span>9. 实践练习</span></a></h2><h3 id="_9-1-实现自定义事件监控" tabindex="-1"><a class="header-anchor" href="#_9-1-实现自定义事件监控"><span>9.1 实现自定义事件监控</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 自定义事件监控器</span></span>
<span class="line"><span class="token keyword">package</span> main</span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;encoding/json&quot;</span></span>
<span class="line">    <span class="token string">&quot;fmt&quot;</span></span>
<span class="line">    <span class="token string">&quot;github.com/opencontainers/runc/libcontainer&quot;</span></span>
<span class="line">    <span class="token string">&quot;time&quot;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">type</span> EventMonitor <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    container libcontainer<span class="token punctuation">.</span>Container</span>
<span class="line">    interval  time<span class="token punctuation">.</span>Duration</span>
<span class="line">    stopCh    <span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewEventMonitor</span><span class="token punctuation">(</span>container libcontainer<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token operator">*</span>EventMonitor <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>EventMonitor<span class="token punctuation">{</span></span>
<span class="line">        container<span class="token punctuation">:</span> container<span class="token punctuation">,</span></span>
<span class="line">        interval<span class="token punctuation">:</span>  time<span class="token punctuation">.</span>Second<span class="token punctuation">,</span></span>
<span class="line">        stopCh<span class="token punctuation">:</span>    <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>EventMonitor<span class="token punctuation">)</span> <span class="token function">Start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 监控统计信息</span></span>
<span class="line">    <span class="token keyword">go</span> m<span class="token punctuation">.</span><span class="token function">monitorStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 监控OOM事件</span></span>
<span class="line">    <span class="token keyword">go</span> m<span class="token punctuation">.</span><span class="token function">monitorOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 监控进程事件</span></span>
<span class="line">    <span class="token keyword">go</span> m<span class="token punctuation">.</span><span class="token function">monitorProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>EventMonitor<span class="token punctuation">)</span> <span class="token function">monitorStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>interval<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> ticker<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">select</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span></span>
<span class="line">            stats<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">Stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">continue</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            event <span class="token operator">:=</span> Event<span class="token punctuation">{</span></span>
<span class="line">                Type<span class="token punctuation">:</span> <span class="token string">&quot;stats&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                ID<span class="token punctuation">:</span>   m<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                Data<span class="token punctuation">:</span> stats<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            m<span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>m<span class="token punctuation">.</span>stopCh<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>EventMonitor<span class="token punctuation">)</span> <span class="token function">monitorOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    oomCh<span class="token punctuation">,</span> err <span class="token operator">:=</span> m<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">NotifyOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">select</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>oomCh<span class="token punctuation">:</span></span>
<span class="line">            event <span class="token operator">:=</span> Event<span class="token punctuation">{</span></span>
<span class="line">                Type<span class="token punctuation">:</span> <span class="token string">&quot;oom&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                ID<span class="token punctuation">:</span>   m<span class="token punctuation">.</span>container<span class="token punctuation">.</span><span class="token function">ID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                Data<span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span></span>
<span class="line">                    <span class="token string">&quot;timestamp&quot;</span><span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token string">&quot;message&quot;</span><span class="token punctuation">:</span>   <span class="token string">&quot;Out of memory killed&quot;</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            m<span class="token punctuation">.</span><span class="token function">emitEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>m<span class="token punctuation">.</span>stopCh<span class="token punctuation">:</span></span>
<span class="line">            <span class="token keyword">return</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>EventMonitor<span class="token punctuation">)</span> <span class="token function">emitEvent</span><span class="token punctuation">(</span>event Event<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-2-实现日志聚合器" tabindex="-1"><a class="header-anchor" href="#_9-2-实现日志聚合器"><span>9.2 实现日志聚合器</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 日志聚合器实现</span></span>
<span class="line"><span class="token keyword">type</span> LogAggregator <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    sources <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>ReadCloser</span>
<span class="line">    output  io<span class="token punctuation">.</span>Writer</span>
<span class="line">    mu      sync<span class="token punctuation">.</span>Mutex</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">NewLogAggregator</span><span class="token punctuation">(</span>output io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token operator">*</span>LogAggregator <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">&amp;</span>LogAggregator<span class="token punctuation">{</span></span>
<span class="line">        sources<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>io<span class="token punctuation">.</span>ReadCloser<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        output<span class="token punctuation">:</span>  output<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>la <span class="token operator">*</span>LogAggregator<span class="token punctuation">)</span> <span class="token function">AddSource</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> source io<span class="token punctuation">.</span>ReadCloser<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    la<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> la<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    la<span class="token punctuation">.</span>sources<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> source</span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 启动日志收集</span></span>
<span class="line">    <span class="token keyword">go</span> la<span class="token punctuation">.</span><span class="token function">collectLogs</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> source<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>la <span class="token operator">*</span>LogAggregator<span class="token punctuation">)</span> <span class="token function">collectLogs</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> source io<span class="token punctuation">.</span>ReadCloser<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">defer</span> source<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    scanner <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> scanner<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        line <span class="token operator">:=</span> scanner<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        </span>
<span class="line">        <span class="token comment">// 添加来源标识</span></span>
<span class="line">        entry <span class="token operator">:=</span> LogEntry<span class="token punctuation">{</span></span>
<span class="line">            Time<span class="token punctuation">:</span>   time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            Source<span class="token punctuation">:</span> name<span class="token punctuation">,</span></span>
<span class="line">            Msg<span class="token punctuation">:</span>    line<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        </span>
<span class="line">        la<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        json<span class="token punctuation">.</span><span class="token function">NewEncoder</span><span class="token punctuation">(</span>la<span class="token punctuation">.</span>output<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span></span>
<span class="line">        la<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-3-实现通信调试工具" tabindex="-1"><a class="header-anchor" href="#_9-3-实现通信调试工具"><span>9.3 实现通信调试工具</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// Socket通信调试工具</span></span>
<span class="line"><span class="token keyword">type</span> SocketDebugger <span class="token keyword">struct</span> <span class="token punctuation">{</span></span>
<span class="line">    socketPath <span class="token builtin">string</span></span>
<span class="line">    messages   <span class="token punctuation">[</span><span class="token punctuation">]</span>Message</span>
<span class="line">    mu         sync<span class="token punctuation">.</span>Mutex</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>sd <span class="token operator">*</span>SocketDebugger<span class="token punctuation">)</span> <span class="token function">Intercept</span><span class="token punctuation">(</span>original <span class="token operator">*</span>syncSocket<span class="token punctuation">)</span> <span class="token operator">*</span>syncSocket <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建代理套接字</span></span>
<span class="line">    parentSock<span class="token punctuation">,</span> childSock<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> <span class="token function">newSyncSocketPair</span><span class="token punctuation">(</span><span class="token string">&quot;debug&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 拦截并记录消息</span></span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">            msg<span class="token punctuation">,</span> err <span class="token operator">:=</span> childSock<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">break</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 记录消息</span></span>
<span class="line">            sd<span class="token punctuation">.</span><span class="token function">recordMessage</span><span class="token punctuation">(</span><span class="token string">&quot;recv&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 转发给原始套接字</span></span>
<span class="line">            original<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token operator">*</span>msg<span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 接收响应</span></span>
<span class="line">            reply<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> original<span class="token punctuation">.</span><span class="token function">ReceiveMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 记录响应</span></span>
<span class="line">            sd<span class="token punctuation">.</span><span class="token function">recordMessage</span><span class="token punctuation">(</span><span class="token string">&quot;send&quot;</span><span class="token punctuation">,</span> reply<span class="token punctuation">)</span></span>
<span class="line">            </span>
<span class="line">            <span class="token comment">// 转发响应</span></span>
<span class="line">            childSock<span class="token punctuation">.</span><span class="token function">SendMessage</span><span class="token punctuation">(</span><span class="token operator">*</span>reply<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">return</span> parentSock</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>sd <span class="token operator">*</span>SocketDebugger<span class="token punctuation">)</span> <span class="token function">recordMessage</span><span class="token punctuation">(</span>direction <span class="token builtin">string</span><span class="token punctuation">,</span> msg <span class="token operator">*</span>syncMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sd<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> sd<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    record <span class="token operator">:=</span> Message<span class="token punctuation">{</span></span>
<span class="line">        Timestamp<span class="token punctuation">:</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        Direction<span class="token punctuation">:</span> direction<span class="token punctuation">,</span></span>
<span class="line">        Type<span class="token punctuation">:</span>      <span class="token function">string</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>Type<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        Data<span class="token punctuation">:</span>      msg<span class="token punctuation">.</span>Data<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    sd<span class="token punctuation">.</span>messages <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sd<span class="token punctuation">.</span>messages<span class="token punctuation">,</span> record<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 实时输出调试信息</span></span>
<span class="line">    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;[%s] %s: %s %+v\\n&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">        record<span class="token punctuation">.</span>Timestamp<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>RFC3339<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        direction<span class="token punctuation">,</span></span>
<span class="line">        msg<span class="token punctuation">.</span>Type<span class="token punctuation">,</span></span>
<span class="line">        msg<span class="token punctuation">.</span>Data<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">func</span> <span class="token punctuation">(</span>sd <span class="token operator">*</span>SocketDebugger<span class="token punctuation">)</span> <span class="token function">DumpMessages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    sd<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">defer</span> sd<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> msg <span class="token operator">:=</span> <span class="token keyword">range</span> sd<span class="token punctuation">.</span>messages <span class="token punctuation">{</span></span>
<span class="line">        data<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;  &quot;</span><span class="token punctuation">)</span></span>
<span class="line">        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-故障排查" tabindex="-1"><a class="header-anchor" href="#_10-故障排查"><span>10. 故障排查</span></a></h2><h3 id="_10-1-通信问题诊断" tabindex="-1"><a class="header-anchor" href="#_10-1-通信问题诊断"><span>10.1 通信问题诊断</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token comment"># 1. 检查Unix套接字</span></span>
<span class="line"><span class="token function">ls</span> <span class="token parameter variable">-la</span> /run/runc/*/</span>
<span class="line"><span class="token comment"># 查看notify.sock等套接字文件</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 2. 使用strace跟踪系统调用</span></span>
<span class="line"><span class="token function">strace</span> <span class="token parameter variable">-f</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">trace</span><span class="token operator">=</span>socket,connect,bind,sendmsg,recvmsg runc run container</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 3. 监控文件描述符</span></span>
<span class="line"><span class="token function">lsof</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">$(</span>pidof runc<span class="token variable">)</span></span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 4. 查看进程间通信</span></span>
<span class="line"><span class="token comment"># 使用ss查看Unix域套接字</span></span>
<span class="line">ss <span class="token parameter variable">-xp</span> <span class="token operator">|</span> <span class="token function">grep</span> runc</span>
<span class="line"></span>
<span class="line"><span class="token comment"># 5. 调试日志级别</span></span>
<span class="line">runc <span class="token parameter variable">--debug</span> --log-format json run container</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-2-事件监控调试" tabindex="-1"><a class="header-anchor" href="#_10-2-事件监控调试"><span>10.2 事件监控调试</span></a></h3><div class="language-go line-numbers-mode" data-highlighter="prismjs" data-ext="go" data-title="go"><pre><code><span class="line"><span class="token comment">// 事件监控调试工具</span></span>
<span class="line"><span class="token keyword">func</span> <span class="token function">debugEventSystem</span><span class="token punctuation">(</span>container libcontainer<span class="token punctuation">.</span>Container<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 启用详细日志</span></span>
<span class="line">    logrus<span class="token punctuation">.</span><span class="token function">SetLevel</span><span class="token punctuation">(</span>logrus<span class="token punctuation">.</span>DebugLevel<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 监控所有文件描述符</span></span>
<span class="line">    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">            fds<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadDir</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;/proc/%d/fd&quot;</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">Getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            logrus<span class="token punctuation">.</span><span class="token function">Debugf</span><span class="token punctuation">(</span><span class="token string">&quot;Open FDs: %d&quot;</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>fds<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 跟踪事件通道</span></span>
<span class="line">    oomCh<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">NotifyOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    memCh<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> container<span class="token punctuation">.</span><span class="token function">NotifyMemoryPressure</span><span class="token punctuation">(</span>MemoryPressureLevelLow<span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">select</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>oomCh<span class="token punctuation">:</span></span>
<span class="line">            logrus<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;OOM event received&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>memCh<span class="token punctuation">:</span></span>
<span class="line">            logrus<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;Memory pressure event received&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">            logrus<span class="token punctuation">.</span><span class="token function">Debug</span><span class="token punctuation">(</span><span class="token string">&quot;No events in 5 seconds&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>runc的通信与监控系统展现了容器运行时的核心基础设施设计:</p><ol><li><strong>多层通信架构</strong>: Unix域套接字、同步套接字、管道等多种通信机制协同工作</li><li><strong>完整事件系统</strong>: 从底层cgroups事件到高层应用事件的完整处理链</li><li><strong>强大监控能力</strong>: CPU、内存、I/O、网络等全方位资源监控</li><li><strong>可靠日志系统</strong>: 结构化日志转发和聚合机制</li><li><strong>精确进程同步</strong>: 父子进程间的精确同步和协调</li><li><strong>灵活信号处理</strong>: 完善的信号转发和处理机制</li></ol><p>通过掌握这些通信和监控机制，我们能够构建可观测、可调试、高可靠的容器运行时系统。</p>`,56))])}const m=l(k,[["render",r]]),b=JSON.parse('{"path":"/blogs/cloud-base/runc-deep-dive/08-tongxinyujiankongxitong.html","title":"通信与监控系统","lang":"en-US","frontmatter":{"categories":["cloud-base/runc-deep-dive"]},"headers":[{"level":2,"title":"概述","slug":"概述","link":"#概述","children":[]},{"level":2,"title":"概述","slug":"概述-1","link":"#概述-1","children":[]},{"level":2,"title":"1. 通信架构总览","slug":"_1-通信架构总览","link":"#_1-通信架构总览","children":[{"level":3,"title":"1.1 多层通信模型","slug":"_1-1-多层通信模型","link":"#_1-1-多层通信模型","children":[]},{"level":3,"title":"1.2 核心通信组件","slug":"_1-2-核心通信组件","link":"#_1-2-核心通信组件","children":[]}]},{"level":2,"title":"2. Socket通信机制","slug":"_2-socket通信机制","link":"#_2-socket通信机制","children":[{"level":3,"title":"2.1 Unix Domain Socket实现","slug":"_2-1-unix-domain-socket实现","link":"#_2-1-unix-domain-socket实现","children":[]},{"level":3,"title":"2.2 同步套接字实现","slug":"_2-2-同步套接字实现","link":"#_2-2-同步套接字实现","children":[]}]},{"level":2,"title":"3. 事件系统实现","slug":"_3-事件系统实现","link":"#_3-事件系统实现","children":[{"level":3,"title":"3.1 事件类型定义","slug":"_3-1-事件类型定义","link":"#_3-1-事件类型定义","children":[]},{"level":3,"title":"3.2 OOM监控实现","slug":"_3-2-oom监控实现","link":"#_3-2-oom监控实现","children":[]}]},{"level":2,"title":"4. 日志系统","slug":"_4-日志系统","link":"#_4-日志系统","children":[{"level":3,"title":"4.1 日志转发机制","slug":"_4-1-日志转发机制","link":"#_4-1-日志转发机制","children":[]},{"level":3,"title":"4.2 调试日志系统","slug":"_4-2-调试日志系统","link":"#_4-2-调试日志系统","children":[]}]},{"level":2,"title":"5. 监控指标收集","slug":"_5-监控指标收集","link":"#_5-监控指标收集","children":[{"level":3,"title":"5.1 CPU指标","slug":"_5-1-cpu指标","link":"#_5-1-cpu指标","children":[]},{"level":3,"title":"5.2 内存指标","slug":"_5-2-内存指标","link":"#_5-2-内存指标","children":[]},{"level":3,"title":"5.3 I/O指标","slug":"_5-3-i-o指标","link":"#_5-3-i-o指标","children":[]}]},{"level":2,"title":"6. 终端处理","slug":"_6-终端处理","link":"#_6-终端处理","children":[{"level":3,"title":"6.1 TTY管理","slug":"_6-1-tty管理","link":"#_6-1-tty管理","children":[]}]},{"level":2,"title":"7. 信号处理","slug":"_7-信号处理","link":"#_7-信号处理","children":[{"level":3,"title":"7.1 信号转发","slug":"_7-1-信号转发","link":"#_7-1-信号转发","children":[]}]},{"level":2,"title":"8. 进程间同步","slug":"_8-进程间同步","link":"#_8-进程间同步","children":[{"level":3,"title":"8.1 同步消息协议","slug":"_8-1-同步消息协议","link":"#_8-1-同步消息协议","children":[]}]},{"level":2,"title":"9. 实践练习","slug":"_9-实践练习","link":"#_9-实践练习","children":[{"level":3,"title":"9.1 实现自定义事件监控","slug":"_9-1-实现自定义事件监控","link":"#_9-1-实现自定义事件监控","children":[]},{"level":3,"title":"9.2 实现日志聚合器","slug":"_9-2-实现日志聚合器","link":"#_9-2-实现日志聚合器","children":[]},{"level":3,"title":"9.3 实现通信调试工具","slug":"_9-3-实现通信调试工具","link":"#_9-3-实现通信调试工具","children":[]}]},{"level":2,"title":"10. 故障排查","slug":"_10-故障排查","link":"#_10-故障排查","children":[{"level":3,"title":"10.1 通信问题诊断","slug":"_10-1-通信问题诊断","link":"#_10-1-通信问题诊断","children":[]},{"level":3,"title":"10.2 事件监控调试","slug":"_10-2-事件监控调试","link":"#_10-2-事件监控调试","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1754503646000,"updatedTime":1754503646000,"contributors":[{"name":"hushengnian","email":"hushengnian@example.com","commits":1}]},"filePathRelative":"blogs/cloud-base/runc-deep-dive/08-通信与监控系统.md"}');export{m as comp,b as data};
