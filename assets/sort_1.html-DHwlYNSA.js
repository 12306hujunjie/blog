import{_ as c,c as p,b as u,d as l,a as n,w as e,r as o,o as r,e as s}from"./app-BbqQjWsx.js";const d="/blog/assets/bubbleSort-CP2In9xA.gif",m={};function k(b,a){const t=o("CodeGroupItem"),i=o("CodeGroup");return r(),p("div",null,[a[5]||(a[5]=u('<h2 id="lowb三人组算法" tabindex="-1"><a class="header-anchor" href="#lowb三人组算法"><span>lowb三人组算法</span></a></h2><h3 id="_1-冒泡排序" tabindex="-1"><a class="header-anchor" href="#_1-冒泡排序"><span>1. 冒泡排序</span></a></h3><p><img src="'+d+'" alt="动图演示"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p>如上，可以看到数字在相邻之间比较大小并不断交换,直到最大的数一直被交换到最后一位，这就是一轮交换，到最后一轮的时候只有一个数无需进行交换了，那么交换的总次数需要列表的长度-1<br> 随着毎轮交换，有序序区自右向左不断增加，需要循环的无序区则不断减少，直至最后一位，交换结束</p></div>',4)),l(i,null,{default:e(()=>[l(t,{title:"python3"},{default:e(()=>a[0]||(a[0]=[n("div",{class:"language-python3 line-numbers-mode","data-highlighter":"prismjs","data-ext":"python3","data-title":"python3"},[n("pre",null,[n("code",null,[n("span",{class:"line"},"def bubble_sort(li):"),s(`
`),n("span",{class:"line"},"    for i in range(len(li) - 1):   # 从第 0 趟开始，一共交换列表的长度 - 1趟，即到下标为列表的最后一个元素的前一个元素停止(range函数左开右闭)"),s(`
`),n("span",{class:"line"},"        for j in range(len(li) - 1 - i):  # 第 0 趟的时候, 无序区就是整个列表，j 为交换元素的指针"),s(`
`),n("span",{class:"line"},"            if li[j] > li[j + 1]:    # 只有在该指针的后个元素小于当前指向的元素的时候才做交换"),s(`
`),n("span",{class:"line"},"                li[j], li[j + 1] = li[j + 1], li[j]   交换两个元素的值"),s(`
`),n("span",{class:"line"},"import random "),s(`
`),n("span",{class:"line"},"li = list(range(100))"),s(`
`),n("span",{class:"line"},"random.shuffle(li)"),s(`
`),n("span",{class:"line"},"print(li)"),s(`
`),n("span",{class:"line"},"bubble_sort(li)"),s(`
`),n("span",{class:"line"},"print(li)"),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[0]}),l(t,{title:"golang"},{default:e(()=>a[1]||(a[1]=[n("div",{class:"language-golang line-numbers-mode","data-highlighter":"prismjs","data-ext":"golang","data-title":"golang"},[n("pre",null,[n("code",null,[n("span",{class:"line"},"package main"),s(`
`),n("span",{class:"line"},"func bubbleSort(li []int) []int{"),s(`
`),n("span",{class:"line"},"    for i:=0;i<len(li)-1;i++{"),s(`
`),n("span",{class:"line"},"        for j:=0;j<len(li)-1-i;j++{"),s(`
`),n("span",{class:"line"},"            if li[j] > li[j+1] {"),s(`
`),n("span",{class:"line"},"                li[j], li[j+1] = li[j+1], li[j]"),s(`
`),n("span",{class:"line"},"            }"),s(`
`),n("span",{class:"line"},"        }"),s(`
`),n("span",{class:"line"},"    }"),s(`
`),n("span",{class:"line"},"    return li"),s(`
`),n("span",{class:"line"},"}"),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[1]}),l(t,{title:"ts"},{default:e(()=>a[2]||(a[2]=[n("div",{class:"language-typescript line-numbers-mode","data-highlighter":"prismjs","data-ext":"ts","data-title":"ts"},[n("pre",null,[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"bubbleSort"),n("span",{class:"token punctuation"},"("),s("li"),n("span",{class:"token operator"},":"),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token builtin"},"number"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" li"),n("span",{class:"token punctuation"},"."),s("length"),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" i"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"let"),s(" j "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" j "),n("span",{class:"token operator"},"<"),s(" li"),n("span",{class:"token punctuation"},"."),s("length "),n("span",{class:"token operator"},"-"),s(" i "),n("span",{class:"token operator"},"-"),s(),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},";"),s(" j"),n("span",{class:"token operator"},"++"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token keyword"},"if"),n("span",{class:"token punctuation"},"("),s("li"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},">"),s(" li"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("                "),n("span",{class:"token punctuation"},"["),s("li"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" li"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),s("li"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token operator"},"+"),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" li"),n("span",{class:"token punctuation"},"["),s("j"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},"]")]),s(`
`),n("span",{class:"line"},[s("            "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("        "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[s("    "),n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token builtin"},"console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"bubbleSort"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")]),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[2]})]),_:1}),a[6]||(a[6]=n("h3",{id:"_2-插入排序",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-插入排序"},[n("span",null,"2. 插入排序")])],-1)),l(i,null,{default:e(()=>[l(t,{title:"python3"},{default:e(()=>a[3]||(a[3]=[n("div",{class:"language-python3 line-numbers-mode","data-highlighter":"prismjs","data-ext":"python3","data-title":"python3"},[n("pre",null,[n("code",null,[n("span",{class:"line"},"def insert_sort(li):"),s(`
`),n("span",{class:"line"},"    for i in range(len(li) - 1): # 遍历无序区"),s(`
`),n("span",{class:"line"},"        j = i - 1                # 有序区从-1开始，也就是第一张牌"),s(`
`),n("span",{class:"line"},"        tmp = li[i]              # 保存一下当前遍历的这个数，"),s(`
`),n("span",{class:"line"},"        while j >= 0  and li[j] > tmp:"),s(`
`),n("span",{class:"line"},"            li[j+1] = li[j]"),s(`
`),n("span",{class:"line"},"            j -= 1"),s(`
`),n("span",{class:"line"},"        li[j + 1] = tmp"),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1)])),_:1,__:[3]}),l(t,{title:"golang"},{default:e(()=>a[4]||(a[4]=[n("div",{class:"language-golang line-numbers-mode","data-highlighter":"prismjs","data-ext":"golang","data-title":"golang"},[n("pre",null,[n("code",null,[n("span",{class:"line"}),s(`
`),n("span",{class:"line"})])]),n("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[n("div",{class:"line-number"})])],-1)])),_:1,__:[4]})]),_:1})])}const v=c(m,[["render",k]]),h=JSON.parse('{"path":"/blogs/algorithm/array/sort_1.html","title":"常用排序算法简析","lang":"en-US","frontmatter":{"title":"常用排序算法简析","date":"2022-03-01T00:00:00.000Z","tags":["排序"],"categories":["algorithm/array"],"sidebar":"auto"},"headers":[{"level":2,"title":"lowb三人组算法","slug":"lowb三人组算法","link":"#lowb三人组算法","children":[{"level":3,"title":"1.  冒泡排序","slug":"_1-冒泡排序","link":"#_1-冒泡排序","children":[]},{"level":3,"title":"2. 插入排序","slug":"_2-插入排序","link":"#_2-插入排序","children":[]}]}],"git":{"createdTime":1752072525000,"updatedTime":1752072525000,"contributors":[{"name":"户盛年","email":"hushengnian@hushengniandeMacBook-Air.local","commits":1}]},"filePathRelative":"blogs/algorithm/array/sort_1.md"}');export{v as comp,h as data};
