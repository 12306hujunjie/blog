(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{578:function(_,v,e){"use strict";e.r(v);var t=e(13),r=Object(t.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h3",{attrs:{id:"缩进"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缩进"}},[_._v("#")]),_._v(" 缩进")]),_._v(" "),e("hr"),_._v(" "),e("ul",[e("li",[_._v("不直接使用 "),e("code",[_._v("tab")]),_._v(" 缩进")]),_._v(" "),e("li",[_._v("使用任何编辑器写 "),e("code",[_._v("Python")]),_._v("，请把一个 "),e("code",[_._v("tab")]),_._v(" 展开为 4 个空格")]),_._v(" "),e("li",[_._v("不要混用"),e("code",[_._v("tab")]),_._v("和空格，否则容易出现 "),e("code",[_._v("IndentationError")])])]),_._v(" "),e("hr"),_._v(" "),e("h3",{attrs:{id:"空格"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空格"}},[_._v("#")]),_._v(" 空格")]),_._v(" "),e("ul",[e("li",[_._v("在 "),e("code",[_._v("list")]),_._v(", "),e("code",[_._v("dict")]),_._v(", "),e("code",[_._v("tuple")]),_._v(", "),e("code",[_._v("set")]),_._v(", 参数列表的 , 后面加一个空格")]),_._v(" "),e("li",[_._v("在 "),e("code",[_._v("dict")]),_._v(" 的 : 后面加一个空格")]),_._v(" "),e("li",[_._v("在注释符号 # 后面加一个空格，但是 "),e("code",[_._v("#!/usr/bin/python")]),_._v(" 的 "),e("code",[_._v("#")]),_._v(" 后不能有空格")]),_._v(" "),e("li",[_._v("操作符两端加一个空格，如 "),e("code",[_._v("+, -, *, /, |, &, =")])]),_._v(" "),e("li",[_._v("接上一条，在参数列表里的 = 两端不需要空格")]),_._v(" "),e("li",[_._v("括号（"),e("code",[_._v("(), {}, []")]),_._v("）内的两端不需要空格")])]),_._v(" "),e("hr"),_._v(" "),e("h3",{attrs:{id:"空行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空行"}},[_._v("#")]),_._v(" 空行")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("function")]),_._v(" 和 "),e("code",[_._v("class")]),_._v(" 顶上两个空行")]),_._v(" "),e("li",[e("code",[_._v("class")]),_._v(" 的 "),e("code",[_._v("method")]),_._v(" 之间一个空行")]),_._v(" "),e("li",[_._v("函数内逻辑无关的段落之间空一行，不要过度使用空行")]),_._v(" "),e("li",[_._v("不要把多个语句写在一行，然后用 ; 隔开")]),_._v(" "),e("li",[e("code",[_._v("if/for/while")]),_._v(" 语句中，即使执行语句只有一句，也要另起一行")])]),_._v(" "),e("hr"),_._v(" "),e("h3",{attrs:{id:"换行"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#换行"}},[_._v("#")]),_._v(" 换行")]),_._v(" "),e("ul",[e("li",[_._v("每一行代码控制在 80 字符以内")]),_._v(" "),e("li",[_._v("使用 \\ 或 () 控制换行")])]),_._v(" "),e("h3",{attrs:{id:"命名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命名"}},[_._v("#")]),_._v(" 命名")]),_._v(" "),e("p",[_._v("使用有意义的，英文单词或词组，不要使用汉语拼音\npackage/module 名中不要出现 -\n各种类型的命名规范：")]),_._v(" "),e("table",[e("thead",[e("tr",[e("th",[_._v("Type")]),_._v(" "),e("th",[_._v("Public")]),_._v(" "),e("th",[_._v("Internal")])])]),_._v(" "),e("tbody",[e("tr",[e("td",[_._v("Modules")]),_._v(" "),e("td",[_._v("lower_with_under")]),_._v(" "),e("td",[_._v("_lower_with_under")])]),_._v(" "),e("tr",[e("td",[_._v("Packages")]),_._v(" "),e("td",[_._v("lower_with_under")]),_._v(" "),e("td")]),_._v(" "),e("tr",[e("td",[_._v("Classes\tCapWords")]),_._v(" "),e("td",[_._v("_CapWords")]),_._v(" "),e("td")]),_._v(" "),e("tr",[e("td",[_._v("Exceptions")]),_._v(" "),e("td",[_._v("CapWords")]),_._v(" "),e("td")]),_._v(" "),e("tr",[e("td",[_._v("Functions")]),_._v(" "),e("td",[_._v("lower_with_under()")]),_._v(" "),e("td",[_._v("_lower_with_under()")])]),_._v(" "),e("tr",[e("td",[_._v("Global/Class Constants")]),_._v(" "),e("td",[_._v("CAPS_WITH_UNDER")]),_._v(" "),e("td",[_._v("_CAPS_WITH_UNDER")])]),_._v(" "),e("tr",[e("td",[_._v("Global/Class Variables")]),_._v(" "),e("td",[_._v("lower_with_under")]),_._v(" "),e("td",[_._v("_lower_with_under")])]),_._v(" "),e("tr",[e("td",[_._v("Instance Variables")]),_._v(" "),e("td",[_._v("lower_with_under")]),_._v(" "),e("td",[_._v("_lower_with_under (protected) or __lower_with_under (private)")])]),_._v(" "),e("tr",[e("td",[_._v("Method Names")]),_._v(" "),e("td",[_._v("lower_with_under()")]),_._v(" "),e("td",[_._v("_lower_with_under() (protected) or __lower_with_under() (private)")])]),_._v(" "),e("tr",[e("td",[_._v("Function/Method Parameters")]),_._v(" "),e("td",[_._v("lower_with_under")]),_._v(" "),e("td")]),_._v(" "),e("tr",[e("td",[_._v("Local Variables")]),_._v(" "),e("td",[_._v("lower_with_under")]),_._v(" "),e("td")])])]),_._v(" "),e("hr"),_._v(" "),e("h3",{attrs:{id:"pycharm开发常用快捷键"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pycharm开发常用快捷键"}},[_._v("#")]),_._v(" Pycharm开发常用快捷键")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("ctrl+alt+L")]),_._v("格式化代码，使用"),e("code",[_._v("ctrl+alt+O")]),_._v("格式化导入")]),_._v(" "),e("li",[e("code",[_._v("shift+F6")]),_._v("重命名方法或者变量")]),_._v(" "),e("li",[e("code",[_._v("ctrl+shift +/-")]),_._v("展开/折叠全部代码块")]),_._v(" "),e("li",[e("code",[_._v("Alt+Enter")]),_._v("自动修正导入")])]),_._v(" "),e("hr"),_._v(" "),e("h3",{attrs:{id:"导包"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#导包"}},[_._v("#")]),_._v(" 导包")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("import")]),_._v(" 的次序，先 "),e("code",[_._v("import Python 内置模块")]),_._v("，再 "),e("code",[_._v("import 第三方模块")]),_._v("，最后 "),e("code",[_._v("import 自己开发的项目中的其它模块")]),_._v("；这几种模块用空行分隔开来。")]),_._v(" "),e("li",[_._v("每个"),e("code",[_._v("import")]),_._v("应该独占一行。")]),_._v(" "),e("li",[_._v("不要使用 "),e("code",[_._v("from module import *")]),_._v("，除非是 "),e("code",[_._v("import")]),_._v(" 常量定义模块或其它你确保不会出现命名空间冲突的模块。")])]),_._v(" "),e("hr"),_._v(" "),e("h3",{attrs:{id:"异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常"}},[_._v("#")]),_._v(" 异常")]),_._v(" "),e("ul",[e("li",[_._v("像这样触发异常: "),e("code",[_._v('raise MyException("Error message")')]),_._v(" 或者 "),e("code",[_._v("raise MyException")]),_._v(" . 不要使用两个参数的形式( "),e("code",[_._v('raise MyException, "Error message"')]),_._v(" )或者过时的字符串异常( "),e("code",[_._v('raise "Error message"')]),_._v(" )")]),_._v(" "),e("li",[_._v("模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的"),e("code",[_._v("Exception")]),_._v("类继承. 模块的异常基类应该叫做”"),e("code",[_._v("Error")]),_._v("”.")]),_._v(" "),e("li",[_._v("永远不要使用 "),e("code",[_._v("except")]),_._v(": 语句来捕获所有异常, 也不要捕获 "),e("code",[_._v("Exception")]),_._v(" 或者 "),e("code",[_._v("StandardError")]),_._v(" , 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容, "),e("code",[_._v("except:")]),_._v(" 真的会捕获包括Python语法错误在内的任何错误. 使用 "),e("code",[_._v("except:")]),_._v(" 很容易隐藏真正的bug.")]),_._v(" "),e("li",[_._v("尽量减少"),e("code",[_._v("try/except")]),_._v("块中的代码量. "),e("code",[_._v("try")]),_._v("块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, "),e("code",[_._v("try/except")]),_._v("块将隐藏真正的错误.")]),_._v(" "),e("li",[_._v("使用"),e("code",[_._v("finally")]),_._v("子句来执行那些无论"),e("code",[_._v("try")]),_._v("块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.")])]),_._v(" "),e("hr"),_._v(" "),e("h2",{attrs:{id:"python编码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#python编码"}},[_._v("#")]),_._v(" Python编码")]),_._v(" "),e("h3",{attrs:{id:"比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#比较"}},[_._v("#")]),_._v(" 比较")]),_._v(" "),e("ul",[e("li",[_._v("空的 "),e("code",[_._v("list")]),_._v(", "),e("code",[_._v("str")]),_._v(", "),e("code",[_._v("tuple")]),_._v(", "),e("code",[_._v("set")]),_._v(", "),e("code",[_._v("dict")]),_._v(" 和 "),e("code",[_._v("0")]),_._v(", "),e("code",[_._v("0.0")]),_._v(", "),e("code",[_._v("None")]),_._v(" 都是 "),e("code",[_._v("False")])]),_._v(" "),e("li",[_._v("使用 "),e("code",[_._v("if some_list")]),_._v(" 而不是 "),e("code",[_._v("if len(some_list)")]),_._v(" 判断某个 "),e("code",[_._v("list")]),_._v(" 是否为空，其他类型同理")]),_._v(" "),e("li",[_._v("使用 "),e("code",[_._v("is")]),_._v(" 和 "),e("code",[_._v("is not")]),_._v(" 与单例（如 "),e("code",[_._v("None")]),_._v("）进行比较，而不是用 "),e("code",[_._v("==")]),_._v(" 和 "),e("code",[_._v("!=")]),_._v("\n使用 "),e("code",[_._v("if a is not None")]),_._v(" 而不是 "),e("code",[_._v("if not a is None")])]),_._v(" "),e("li",[_._v("用 "),e("code",[_._v("isinstance")]),_._v(" 而不是 "),e("code",[_._v("type")]),_._v(" 判断类型\n不要用 "),e("code",[_._v("==")]),_._v(" 和 "),e("code",[_._v("!=")]),_._v(" 与 "),e("code",[_._v("True")]),_._v(" 和 "),e("code",[_._v("False")]),_._v(" 比较（除非有特殊情况，如在 "),e("code",[_._v("sqlalchemy")]),_._v(" 中可能用到)")])]),_._v(" "),e("h3",{attrs:{id:"性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[_._v("#")]),_._v(" 性能")]),_._v(" "),e("ul",[e("li",[_._v("需要查询操作时用"),e("code",[_._v("dict")])]),_._v(" "),e("li",[_._v("使用"),e("code",[_._v("in")]),_._v("操作时用 "),e("code",[_._v("set")]),_._v(" 加速 “存在性” 检查，"),e("code",[_._v("list")]),_._v(" 的查找是线性的，复杂度 "),e("code",[_._v("O(n)")]),_._v("，"),e("code",[_._v("set")]),_._v(" 底层是 "),e("code",[_._v("hash table")]),_._v(", 复杂度 "),e("code",[_._v("O(1)")]),_._v("，但用 "),e("code",[_._v("set")]),_._v(" 需要比 "),e("code",[_._v("list")]),_._v(" 更多内存空间")]),_._v(" "),e("li",[e("code",[_._v("set")]),_._v(" 的 "),e("code",[_._v("union")]),_._v("， "),e("code",[_._v("intersection")]),_._v("，"),e("code",[_._v("difference")]),_._v(" 操作要比 "),e("code",[_._v("list")]),_._v(" 的迭代要快。因此如果涉及到求 "),e("code",[_._v("list")]),_._v(" 交集，并集或者差的问题可以转换为 "),e("code",[_._v("set")]),_._v(" 来操作。")]),_._v(" "),e("li",[_._v("python 中的字符串对象是不可改变的，因此对任何字符串的操作如拼接，修改等都将产生一个新的字符串对象，而不是基于原字符串，所以在字符串连接的使用尽量使用 "),e("code",[_._v("join()")]),_._v(" 而不是 "),e("code",[_._v("+")])]),_._v(" "),e("li",[_._v("当对字符串可以使用正则表达式或者内置函数来处理的时候，选择内置函数。如 "),e("code",[_._v("str.isalpha()")]),_._v("，"),e("code",[_._v("str.isdigit()")]),_._v("，"),e("code",[_._v("str.startswith(('x', 'yz'))")]),_._v("，"),e("code",[_._v("str.endswith(('x', 'yz'))")])]),_._v(" "),e("li",[_._v("对字符进行格式化比直接串联读取要快，因此要使用")])]),_._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('out_put = "she\'s name is {},and she is a {}".format(lili,girl)\n')])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("p",[_._v("而不是")]),_._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('out_put = "she\'s name is" + lili + ",and she is a " + girl\n')])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br")])]),e("ul",[e("li",[_._v("使用列表解析（"),e("code",[_._v("list comprehension")]),_._v("）和生成器表达式（"),e("code",[_._v("generator expression")]),_._v("）")])]),_._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v("# 列表解析要比在循环中重新构建一个新的 list 更为高效，因此我们可以利用这一特性来提高运行的效率。\nfor i in range (1000000): \n     for w in list: \n         total.append(w) \n# 使用列表解析\nfor i in range (1000000): \n    a = [w for w in list]\n")])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br"),e("span",{staticClass:"line-number"},[_._v("4")]),e("br"),e("span",{staticClass:"line-number"},[_._v("5")]),e("br"),e("span",{staticClass:"line-number"},[_._v("6")]),e("br"),e("span",{staticClass:"line-number"},[_._v("7")]),e("br")])]),e("p",[_._v("生成器表达式则是直接返回一个生成器，在迭代的时候调用，效率很高")]),_._v(" "),e("ul",[e("li",[_._v("交换变量值时使用"),e("code",[_._v("a,b = b,a")]),_._v("而不是借助中间变量 "),e("code",[_._v("t=a")]),_._v(";"),e("code",[_._v("a=b")]),_._v(";"),e("code",[_._v("b=t")]),_._v(";")]),_._v(" "),e("li",[_._v("python 定位程序性能瓶颈"),e("br"),_._v(" "),e("strong",[_._v("python 内置了丰富的性能分析工具，如 "),e("code",[_._v("profile")]),_._v(","),e("code",[_._v("cProfile")]),_._v(" 与 "),e("code",[_._v("hotshot")]),_._v(" 等。其中 "),e("code",[_._v("Profiler")]),_._v(" 是 "),e("code",[_._v("python")]),_._v(" 自带的一组程序，能够描述程序运行时候的性能，并提供各种统计帮助用户定位程序的性能瓶颈。Python 标准模块提供三种 "),e("code",[_._v("profilers")]),_._v(":"),e("code",[_._v("cProfile")]),_._v(","),e("code",[_._v("profile")]),_._v(" 以及 "),e("code",[_._v("hotshot")]),_._v("。")])])]),_._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[_._v('# 使用 profile 进行性能分析\nimport profile \ndef profileTest(): \n   Total =1; \n   for i in range(10): \n       Total=Total*(i+1) \n       print Total \n   return Total \nif __name__ == "__main__": \n   profile.run("profileTest()")\n')])]),_._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[_._v("1")]),e("br"),e("span",{staticClass:"line-number"},[_._v("2")]),e("br"),e("span",{staticClass:"line-number"},[_._v("3")]),e("br"),e("span",{staticClass:"line-number"},[_._v("4")]),e("br"),e("span",{staticClass:"line-number"},[_._v("5")]),e("br"),e("span",{staticClass:"line-number"},[_._v("6")]),e("br"),e("span",{staticClass:"line-number"},[_._v("7")]),e("br"),e("span",{staticClass:"line-number"},[_._v("8")]),e("br"),e("span",{staticClass:"line-number"},[_._v("9")]),e("br"),e("span",{staticClass:"line-number"},[_._v("10")]),e("br")])]),e("p",[_._v("如果需要将输出以日志的形式保存，只需要在调用的时候加入另外一个参数。如 "),e("code",[_._v('profile.run("profileTest()","testprof")')]),_._v("。")]),_._v(" "),e("h3",{attrs:{id:"其他"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[_._v("#")]),_._v(" 其他")]),_._v(" "),e("ul",[e("li",[_._v("使用 "),e("code",[_._v("for item in list")]),_._v(" 迭代 "),e("code",[_._v("list")]),_._v(", "),e("code",[_._v("for index, item in enumerate(list)")]),_._v(" 迭代 "),e("code",[_._v("list")]),_._v(" 并获取下标")]),_._v(" "),e("li",[_._v("使用内建函数 "),e("code",[_._v("sorted")]),_._v(" 和 "),e("code",[_._v("list.sort")]),_._v(" 进行排序")]),_._v(" "),e("li",[_._v("使用装饰器("),e("code",[_._v("decorator")]),_._v(")")]),_._v(" "),e("li",[_._v("使用 "),e("code",[_._v("with")]),_._v(" 语句处理上下文")]),_._v(" "),e("li",[_._v("使用 "),e("code",[_._v("logging")]),_._v(" 记录日志，配置好格式和级别")]),_._v(" "),e("li",[_._v("适量使用 "),e("code",[_._v("map")]),_._v(", "),e("code",[_._v("reduce")]),_._v(", "),e("code",[_._v("filter")]),_._v(" 和 "),e("code",[_._v("lambda")]),_._v("，使用内建的 "),e("code",[_._v("all")]),_._v(", "),e("code",[_._v("any")]),_._v(" 处理多个条件的判断")])])])}),[],!1,null,null,null);v.default=r.exports}}]);