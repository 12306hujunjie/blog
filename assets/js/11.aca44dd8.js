(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{575:function(t,a,s){"use strict";s.r(a);var e=s(13),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"缓存主要有以下几种模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存主要有以下几种模式"}},[t._v("#")]),t._v(" 缓存主要有以下几种模式")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("cache-aside")]),s("br"),t._v("\n应用请求先走缓存，缓存未命中则查数据库，然后由应用更新到缓存(常用的业务缓存模式，对缓存失效有一定的容忍性，缓存中数据模型与数据库中的数据模型可以不同)")]),t._v(" "),s("li",[t._v("直读("),s("code",[t._v("read-through")]),t._v(")"),s("br"),t._v("\n与"),s("code",[t._v("cache-aside")]),t._v("很接近，应用请求走缓存，但是应用与数据库不链接，由缓存自动从数据库同步数据")]),t._v(" "),s("li",[t._v("直写("),s("code",[t._v("write-through")]),t._v(")"),s("br"),t._v("\n与上两种读缓存不一样的是，应用会将数据直接写入缓存，由缓存自动同步数据到数据库\n(与"),s("code",[t._v("read-through")]),t._v("相结合可以很好的解决读写数据不一致的问题，由缓存写入数据库)")]),t._v(" "),s("li",[t._v("绕写("),s("code",[t._v("write-around")]),t._v(")"),s("br"),t._v("\n其实不会用到缓存，而是直接写入到数据库中(配合"),s("code",[t._v("cache-aside")]),t._v("/"),s("code",[t._v("read-through")]),t._v("使用, 只在缓存未命中的情况下写缓存)")]),t._v(" "),s("li",[t._v("回写("),s("code",[t._v("write-back")]),t._v(")"),s("br"),t._v("\n与"),s("code",[t._v("write-through")]),t._v("写入数据库时机不同，每隔一段时间或者当数据将要被移除缓存的时候将数据批量更新到数据库")])]),t._v(" "),s("hr"),t._v(" "),s("h1",{attrs:{id:"主要搭配使用类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主要搭配使用类型"}},[t._v("#")]),t._v(" 主要搭配使用类型")]),t._v(" "),s("h2",{attrs:{id:"_1-cache-aside"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-cache-aside"}},[t._v("#")]),t._v(" 1. "),s("code",[t._v("cache-aside")])]),t._v(" "),s("h3",{attrs:{id:"_1-第一种策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-第一种策略"}},[t._v("#")]),t._v(" 1. 第一种策略:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  1. 更新数据库  \n  2. 更新缓存\n")])])]),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"title"}),s("p",[t._v("这个策略有线程安全的问题，可能出现缓存和数据库不一致的问题(如果有两个写线程先后写完数据库，但旧数据后写缓存就会导致脏数据)。这里可以考虑做增量缓存更新的场景, 比如："),s("br"),t._v("\n1. 点赞和取消点赞\n2. 点踩或者取消点踩"),s("br"),t._v("\n3. 评论计数增量更新 等")])]),s("h3",{attrs:{id:"_2-第二种策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-第二种策略"}},[t._v("#")]),t._v(" 2. 第二种策略:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v("  1. 更新数据库  \n  2. 删除缓存\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("这个策略也可能会出现线程安全的问题(A读B写，A线程"),s("code",[t._v("cache miss")]),t._v("从数据库中获取数据,B写数据库，B删缓存，A由于网络延迟，将脏数据写入缓存)"),s("br"),t._v("\n但是这个策略由于需要满足比较苛刻的条件(即统一时间内写操作比读操作快且写操作在读写缓存操作的中间时间段)几乎不太可能发生,所以我们一般可以使用这种策略 ,另外再设置合适的过期时间，即使发生脏数据的情况，也不会发生很长时间(适合写频率适中且读操作偏多的情况)")])]),s("p",[t._v("PS:"),s("strong",[t._v("应用于缓存不支持"),s("code",[t._v("read-through/write-through")]),t._v("的系统，适用于读写频次适中的系统")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("优点:"),s("br"),t._v("\n1. 缓存仅用于被请求的数据,属于惰性加载("),s("code",[t._v("lazy-loading")]),t._v(")")]),t._v(" "),s("p",[t._v("缺点:")]),t._v(" "),s("ol",[s("li",[t._v("发生"),s("code",[t._v("cache miss")]),t._v(" 的情况时比较慢，因为要处理三个步骤：查询缓存，读数据库，写缓存")]),t._v(" "),s("li",[t._v("缓存逻辑都放在应用程序中，增加了复杂度")])])]),s("h2",{attrs:{id:"_2-read-through-write-through直读直写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-read-through-write-through直读直写"}},[t._v("#")]),t._v(" 2. "),s("code",[t._v("read-through/write-through")]),t._v("直读直写")]),t._v(" "),s("p",[t._v("在这种模式中，应用将缓存作为数据源，更新数据和读取数据由缓存代理，减少应用处理缓存的复杂度  适合读多，写频次适中的应用")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("优点:")]),t._v(" "),s("ol",[s("li",[t._v("读写非常快")]),t._v(" "),s("li",[t._v("缓存不存在脏数据")]),t._v(" "),s("li",[t._v("相比较"),s("code",[t._v("cache-aside")]),t._v("模式，读取速度更高")]),t._v(" "),s("li",[t._v("应用逻辑比较简单"),s("br"),t._v("\n缺点:")]),t._v(" "),s("li",[t._v("对于写多读少的应用, "),s("code",[t._v("write-through")]),t._v("很浪费性能，多次写入却很少读取，白白增加了每次都写入缓存的延迟")]),t._v(" "),s("li",[t._v("由缓存代理数据库，缓存模型必须与数据库模型保持一致")])])]),s("h2",{attrs:{id:"_3-read-through-write-back直读回写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-read-through-write-back直读回写"}},[t._v("#")]),t._v(" 3.  "),s("code",[t._v("read-through/write-back")]),t._v("直读回写")]),t._v(" "),s("p",[t._v("与直写的写入实际不同，回写将缓存作为可靠数据源，每次都只写入缓存，写入数据库则采用异步批量写入， 适用于读写频次都非常高的应用")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("优点:")]),t._v(" "),s("ol",[s("li",[t._v("读写非常快")]),t._v(" "),s("li",[t._v("减少了写库的频率，增加写入性能"),s("br"),t._v("\n缺点:")]),t._v(" "),s("li",[t._v("有数据批量丢失的风险，如果缓存挂掉而没有即时写到数据库中，那么缓存中的数据将永久丢失")])])]),s("h2",{attrs:{id:"_4-read-through-write-around直读绕写"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-read-through-write-around直读绕写"}},[t._v("#")]),t._v(" 4.  "),s("code",[t._v("read-through/write-around")]),t._v("直读绕写")]),t._v(" "),s("p",[t._v("更新直接写入数据库，不写缓存，由缓存自动从数据库拉取数据，应用读取缓存，适用于写少读少的应用")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("优点:")]),t._v(" "),s("ol",[s("li",[t._v("相比较"),s("code",[t._v("write-through")]),t._v("写入的时候的效率较高，如果数据写入后很少被读取，缓存也不会被没用到的数据占满。")])]),t._v(" "),s("p",[t._v("缺点:")]),t._v(" "),s("ol",[s("li",[t._v("如果数据会写入多次，那么可能存在缓存和数据库不一致")])])]),s("h2",{attrs:{id:"具体实践场景-redis"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#具体实践场景-redis"}},[t._v("#")]),t._v(" 具体实践场景("),s("code",[t._v("redis")]),t._v(")")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[t._v("日常使用比较常用的就是"),s("code",[t._v("cache-aside")]),t._v("了，但是不同策略针对的缓存处理也不同，\n如果在点赞的场景，更新评论数点赞数等都是高频写入，就不建议做删除缓存的策略")])]),s("h2",{attrs:{id:"cache-aside"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cache-aside"}},[t._v("#")]),t._v(" "),s("code",[t._v("cache-aside")])]),t._v(" "),s("ul",[s("li",[t._v("第一种场景，更新缓存时会出现线程安全问题，这时候可以考虑一下redis watch机制，操作新增一个user_id或者减少一个user_id,\n重点是要基于redis缓存内数据的修改，"),s("code",[t._v("python")]),t._v("代码如下")])]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" redis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pipeline"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache_key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# do something like")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 1. get value from redis 此时 value 对应的 cache_key 在 watch 时不会发生变化，可以放心读取")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2. update value to add id or delete id  # 内存操作增删数据")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#p.multi()")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#p.set | sadd | hset 写入数据")]),t._v("\n            p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("except")]),t._v(" WatchError"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("watch时如果这个缓存有修改，就会直接抛"),s("code",[t._v("watchError")]),t._v("，保证该更新(在"),s("code",[t._v("redis pipline")]),t._v("的"),s("code",[t._v("multi")]),t._v("操作和"),s("code",[t._v("execute")]),t._v("操作之间的更新操作)是原子独立的，\n如果对应数据是数字的话，可以用"),s("code",[t._v("redis")]),t._v("自带的"),s("code",[t._v("increment")]),t._v("机制，先判断缓存是否存在，没有就从数据库获取最新数据并写入缓存"),s("br"),t._v("\n当每个操作只涉及到对具体缓存的增量修改的时候, 就不在乎先后了，每个操作都是原子的独立的\n通过更新缓存减少"),s("code",[t._v("cache miss")]),t._v(" 的频率")]),t._v(" "),s("ul",[s("li",[t._v("第二种场景, 适用于写少读多的场景，在操作数据库修改数据之后直接删除缓存，方便快捷")])])])}),[],!1,null,null,null);a.default=r.exports}}]);